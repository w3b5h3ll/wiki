<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AndroidSEC工具列表</title>
    <url>/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<blockquote>
<p>Android客户端漏洞挖掘常见工具使用，在分析时可以有一个初步的判断。测试过程还是要依靠CheckList+攻击面分析做到覆盖度，避免随机挖洞。</p>
</blockquote>
<h2 id="Packer识别与脱壳"><a href="#Packer识别与脱壳" class="headerlink" title="Packer识别与脱壳"></a>Packer识别与脱壳</h2><p>甲方安全与乙方安全有很大的不同，一般外部人员进行测试需要去完成脱壳，过环境监测等一些<strong>分析环境初始化</strong>工作。这里只介绍工具使用，不对原理进行展开。</p>
<p>尝试对改论文中提到的主流工具进行测试：<strong>《ART环境下的Android软件通用脱壳方法研究》</strong>，引用一张文章中的图，如下</p>
<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-08-01-31-07-image.png"></p>
<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-08-01-32-23-image.png"></p>
<h3 id="Packer识别"><a href="#Packer识别" class="headerlink" title="Packer识别"></a>Packer识别</h3><p>Android应用可以使用<code>APKiD</code>与<code>GDA</code>工具进行识别</p>
<p>APKiD</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install</span></span><br><span class="line">pip install apkid</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using</span></span><br><span class="line">➤ apkid demo.apk                                                                                                                          (base) </span><br><span class="line">[+] APKiD 2.1.5 :: from RedNaga :: rednaga.io</span><br><span class="line">[*] demo.apk</span><br><span class="line"> |-&gt; packer : Tencent<span class="string">&#x27;s Legu</span></span><br><span class="line"><span class="string">[*] demo.apk!assets/sc/sc!classes.dex</span></span><br><span class="line"><span class="string"> |-&gt; compiler : r8</span></span><br><span class="line"><span class="string"> |-&gt; obfuscator : unreadable field names, unreadable method names</span></span><br><span class="line"><span class="string">[*] demo.apk!assets/magisk!system/priv-app/WPengSystemCore/WPengSystemCore.apk!classes.dex</span></span><br><span class="line"><span class="string"> |-&gt; compiler : r8</span></span><br><span class="line"><span class="string"> |-&gt; obfuscator : unreadable field names, unreadable method names</span></span><br><span class="line"><span class="string">[*] demo.apk!lib/armeabi/libshell-super.2019.so</span></span><br><span class="line"><span class="string"> |-&gt; anti_vm : emulator file check</span></span><br><span class="line"><span class="string">[*] demo.apk!assets/libshellx-super.2019.so</span></span><br><span class="line"><span class="string"> |-&gt; anti_vm : emulator file check</span></span><br><span class="line"><span class="string">[*] demo.apk!classes.dex</span></span><br><span class="line"><span class="string"> |-&gt; anti_disassembly : non-zero link offset, non-zero link size</span></span><br><span class="line"><span class="string"> |-&gt; anti_vm : Build.TAGS check, emulator file check, possible Build.SERIAL check, possible ro.secure check</span></span><br><span class="line"><span class="string"> |-&gt; compiler : dexlib 2.x</span></span><br><span class="line"><span class="string"> |-&gt; packer : Mobile Tencent Protect</span></span><br></pre></td></tr></table></figure>

<p>GDA</p>
<p>直接将apk拖入即可识别</p>
<h3 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h3><h4 id="FRIDA-DEXdump"><a href="#FRIDA-DEXdump" class="headerlink" title="FRIDA-DEXdump"></a>FRIDA-DEXdump</h4><p>objection无法加载，pip 安装使用即可。使用的环境依旧是frida12.8.0，<code>git clone + python ./setup.py install</code>安装</p>
<p><a href="https://github.com/hluwa/frida-dexdump">https://github.com/hluwa/frida-dexdump</a></p>
<p><a href="https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA">https://mp.weixin.qq.com/s/n2XHGhshTmvt2FhxyFfoMA</a></p>
<h4 id="Fart"><a href="#Fart" class="headerlink" title="Fart"></a>Fart</h4><p><a href="https://github.com/hanbinglengyue/FART">https://github.com/hanbinglengyue/FART</a></p>
<ul>
<li>android6.0，android8.0</li>
</ul>
<h4 id="Youpk"><a href="#Youpk" class="headerlink" title="Youpk"></a>Youpk</h4><p><a href="https://github.com/Youlor/unpacker">https://github.com/Youlor/unpacker</a></p>
<ul>
<li><p>Pixel 1</p>
</li>
<li><p>android-7.1.2_r33</p>
</li>
</ul>
<h4 id="BlackDex"><a href="#BlackDex" class="headerlink" title="BlackDex"></a>BlackDex</h4><p><a href="https://github.com/CodingGay/BlackDex">https://github.com/CodingGay/BlackDex</a></p>
<ul>
<li><p>android5.0-12</p>
</li>
<li><p><strong>仅支持被壳保护的dex</strong>，不支持App动态加载的dex&#x2F;jar</p>
</li>
</ul>
<p>安装BlackDex.apk进行脱壳即可</p>
<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-08-10-42-12-image.png"></p>
<h4 id="VMOS"><a href="#VMOS" class="headerlink" title="VMOS"></a>VMOS</h4><h2 id="Drozer"><a href="#Drozer" class="headerlink" title="Drozer"></a>Drozer</h2><h3 id="安装与基础使用"><a href="#安装与基础使用" class="headerlink" title="安装与基础使用"></a>安装与基础使用</h3><p>Mac上安装Python2.7的姿势</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 失败</span></span><br><span class="line">sudo easy_install pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功</span></span><br><span class="line">curl <span class="string">&#x27;https://bootstrap.pypa.io/pip/2.7/get-pip.py&#x27;</span> &gt; get-pip.py</span><br><span class="line"><span class="comment"># tiger @ mbp in ~ [10:47:37]</span></span><br><span class="line">$ <span class="built_in">which</span> pip</span><br><span class="line">/Users/tiger/Library/Python/2.7/bin/pip</span><br></pre></td></tr></table></figure>

<p>建议使用<strong>conda</strong>开启Python2.7的虚拟机环境进行安装</p>
<ul>
<li><p>whl安装包</p>
</li>
<li><p>agent安装包</p>
</li>
<li><p>测试安装包sieve.apk（无法使用Genymotion模拟器进行安装，建议使用真机）</p>
</li>
</ul>
<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-06-19-51-11-image.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip install drozer-2.4.4-py2-none-any.whl --ignore-installed pyOpenSSL</span><br><span class="line">sudo pip install protobuf pyOpenSSL Twisted service_identity</span><br></pre></td></tr></table></figure>

<p>开启服务端并连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb forward tcp:31415 tcp:31415</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-06-20-33-57-image.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">drozer console connect</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-06-20-35-21-image.png"></p>
<blockquote>
<p>Interesting Commands</p>
</blockquote>
<table>
<thead>
<tr>
<th><strong>Commands</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Help MODULE</strong></td>
<td>Shows help of the selected module</td>
</tr>
<tr>
<td><strong>list</strong></td>
<td>Shows a list of all drozer modules that can be executed in the current session. This hides modules that you don’t have appropriate permissions to run.</td>
</tr>
<tr>
<td><strong>shell</strong></td>
<td>Start an interactive Linux shell on the device, in the context of the Agent.</td>
</tr>
<tr>
<td><strong>clean</strong></td>
<td>Remove temporary files stored by drozer on the Android device.</td>
</tr>
<tr>
<td><strong>load</strong></td>
<td>Load a file containing drozer commands and execute them in sequence.</td>
</tr>
<tr>
<td><strong>module</strong></td>
<td>Find and install additional drozer modules from the Internet.</td>
</tr>
<tr>
<td><strong>unset</strong></td>
<td>Remove a named variable that drozer passes to any Linux shells that it spawns.</td>
</tr>
<tr>
<td><strong>set</strong></td>
<td>Stores a value in a variable that will be passed as an environmental variable to any Linux shells spawned by drozer.</td>
</tr>
<tr>
<td><strong>shell</strong></td>
<td>Start an interactive Linux shell on the device, in the context of the Agent</td>
</tr>
<tr>
<td><strong>run MODULE</strong></td>
<td>Execute a drozer module</td>
</tr>
<tr>
<td><strong>exploit</strong></td>
<td>Drozer can create exploits to execute in the decide. <code>drozer exploit list</code></td>
</tr>
<tr>
<td><strong>payload</strong></td>
<td>The exploits need a payload. <code>drozer payload list</code></td>
</tr>
</tbody></table>
<p>常用命令，结合sieve该app进行说明</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Package</span></span><br><span class="line"><span class="comment"># 过滤package名称</span></span><br><span class="line">run app.package.list -f sieve</span><br><span class="line"><span class="comment"># package基本信息</span></span><br><span class="line">run app.package.info -a com.mwr.example.sieve</span><br><span class="line"><span class="comment"># mainfest信息</span></span><br><span class="line">run app.package.manifest com.mwr.example.sieve</span><br><span class="line"><span class="comment"># 攻击面分析</span></span><br><span class="line">run app.package.attacksurface com.mwr.example.sieve</span><br><span class="line">dz&gt; run app.package.attacksurface com.mwr.example.sieve</span><br><span class="line">Attack Surface:</span><br><span class="line">  3 activities exported</span><br><span class="line">  0 broadcast receivers exported</span><br><span class="line">  2 content providers exported</span><br><span class="line">  2 services exported</span><br><span class="line">    is debuggable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Activity</span></span><br><span class="line"><span class="comment"># 获取可导出activity</span></span><br><span class="line">run app.activity.info -a com.mwr.example.sieve</span><br><span class="line"><span class="comment"># 启动activity，使用adb或者drozer</span></span><br><span class="line">adb shell am start -n com.example.demo/com.example.test.MainActivity</span><br><span class="line">run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList</span><br></pre></td></tr></table></figure>

<p>可以知道，启动了另外的Activity</p>
<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-06-20-55-20-image.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Content Providers</span></span><br><span class="line"><span class="comment"># 获取暴露的content provider信息</span></span><br><span class="line">run app.provider.info -a com.mwr.example.sieve </span><br><span class="line"><span class="comment"># 获取URI信息</span></span><br><span class="line">run scanner.provider.finduris -a com.mwr.example.sieve </span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于database的content provider</span></span><br><span class="line"><span class="comment"># 查询content，数据库相关的curd，增删改查</span></span><br><span class="line">run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical</span><br><span class="line">dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/</span><br><span class="line">| _id | service | username | password | email |</span><br><span class="line">dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/</span><br><span class="line">| Password         | pin  |</span><br><span class="line">| 1234567890qwerty | 1234 |</span><br><span class="line"></span><br><span class="line">dz&gt; run app.provider.insert content://com.mwr.example.sieve.DBContentProvider/Keys/ --string pin 1337 --string Password 123456</span><br><span class="line">Done.</span><br><span class="line"></span><br><span class="line">dz&gt; run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Keys/ --vertical </span><br><span class="line">Password  1234567890qwerty</span><br><span class="line">     pin  1234</span><br><span class="line"></span><br><span class="line">Password  123456</span><br><span class="line">     pin  1337</span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="AppInfoScanner"><a href="#AppInfoScanner" class="headerlink" title="AppInfoScanner"></a>AppInfoScanner</h3><ul>
<li><p>静态信息扫描</p>
</li>
<li><p>资产收集</p>
</li>
</ul>
<p>python app.py android -i ~&#x2F;Desktop&#x2F;sieve.apk </p>
<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-06-21-59-13-image.png"></p>
<h3 id="ApplicationScanner"><a href="#ApplicationScanner" class="headerlink" title="ApplicationScanner"></a>ApplicationScanner</h3><ul>
<li>漏洞扫描</li>
</ul>
<p>python AppScannner.py -i ~&#x2F;Desktop&#x2F;sieve.apk</p>
<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-06-22-09-29-image.png"></p>
<h3 id="AppShark"><a href="#AppShark" class="headerlink" title="AppShark"></a>AppShark</h3><p><a href="https://github.com/bytedance/appshark">https://github.com/bytedance/appshark</a></p>
<ul>
<li><p>静态污点分析工具</p>
</li>
<li><p>Java11</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar build/libs/AppShark-0.1.2-all.jar  config/config.json5</span><br><span class="line"><span class="comment"># config</span></span><br><span class="line">&#123;</span><br><span class="line">  //apk to anlayze</span><br><span class="line">  <span class="string">&quot;apkPath&quot;</span>: <span class="string">&quot;/Users/tiger/Desktop/sieve.apk&quot;</span>,</span><br><span class="line">  //result output directory</span><br><span class="line">  <span class="string">&quot;out&quot;</span>: <span class="string">&quot;out&quot;</span>,</span><br><span class="line">  <span class="string">&quot;rules&quot;</span>: <span class="string">&quot;unZipSlip.json&quot;</span>,</span><br><span class="line">  <span class="string">&quot;maxPointerAnalyzeTime&quot;</span>: 600,</span><br><span class="line">  //print more info about this rule</span><br><span class="line">  <span class="string">&quot;debugRule&quot;</span>: <span class="string">&quot;unZipSlip&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/08/04/AndroidSEC%E5%B7%A5%E5%85%B7%E5%88%97%E8%A1%A8/2023-08-06-22-50-45-image.png"></p>
<h3 id="APKHunt"><a href="#APKHunt" class="headerlink" title="APKHunt"></a>APKHunt</h3><p>Linux环境使用，一个go开发的工具，用于满足OWASP MASVS安全要求</p>
<p><a href="https://github.com/Cyber-Buddy/APKHunt">https://github.com/Cyber-Buddy/APKHunt</a></p>
<h3 id="apk-sh"><a href="#apk-sh" class="headerlink" title="apk.sh"></a>apk.sh</h3><p>一个脚本工具，增强功能</p>
<p><a href="https://github.com/ax/apk.sh">https://github.com/ax/apk.sh</a></p>
<h3 id="Yaazhini"><a href="#Yaazhini" class="headerlink" title="Yaazhini"></a>Yaazhini</h3><p>APK扫描工具，UI漂亮</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://bbs.kanxue.com/thread-269196.htm">https://bbs.kanxue.com/thread-269196.htm</a></p>
<p>Drozer</p>
<ul>
<li><p><a href="https://labs.withsecure.com/tools/drozer">Drozer | WithSecure™ Labs</a></p>
</li>
<li><p><a href="https://github.com/WithSecureLabs/drozer">https://github.com/WithSecureLabs/drozer</a></p>
</li>
<li><p><a href="https://book.hacktricks.xyz/mobile-pentesting/android-app-pentesting/drozer-tutorial">Drozer Tutorial - HackTricks</a></p>
</li>
</ul>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MDQ1NDE2OA==&mid=2247487564&idx=1&sn=ba311de5fa67cc99de8885f7dc8d2de3&chksm=ead18cbbdda605ad34e32a9ef7ff45a64e89dbe5aa54118d4588d11e82465607e6b5fea91f4f&token=318214511&lang=zh_CN#rd">Android漏洞挖掘三件套</a></p>
<p>脱壳</p>
<ul>
<li><p><a href="http://www.juziss.cn/2020/09/22/app%E7%9A%84%E5%8A%A0%E5%A3%B3%E4%B8%8E%E8%84%B1%E5%A3%B3/">app的加壳与脱壳 | 一只橘子的思考</a></p>
</li>
<li><p>《ART环境下的Android软件通用脱壳方法研究》</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>AndroidSEC</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidSEC抓包总结</title>
    <url>/2022/11/28/AndroidSEC%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>抓包分析客户端与后台通信流量</p>
<span id="more"></span>

<h2 id="HTTP抓包简介"><a href="#HTTP抓包简介" class="headerlink" title="HTTP抓包简介"></a>HTTP抓包简介</h2><p>抓包方式：</p>
<ul>
<li>HTTP框架hook</li>
<li>系统框架hook</li>
<li>中间人代理</li>
</ul>
<p>常见抓包工具：</p>
<ul>
<li>Charles</li>
<li>BurpSuite</li>
<li>……</li>
</ul>
<p>使用<code>Charles</code>，可以发现https的包都是无法解析的，但可以抓取http</p>
<p><img src="/2022/11/28/AndroidSEC%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/image-20221128215932542.png" alt="image-20221128215932542"></p>
<p>BurpSuite同理，使用比较方便</p>
<p>HTTP缺陷：</p>
<ul>
<li>通信明文，被监听</li>
<li>不验证对方身份，造成伪装</li>
<li>无法验证完整性，被篡改</li>
</ul>
<h2 id="HTTPS中间人抓包"><a href="#HTTPS中间人抓包" class="headerlink" title="HTTPS中间人抓包"></a>HTTPS中间人抓包</h2><p>核心原理：抓住包在明文的一切时机</p>
<p>HTTPS请求过程</p>
<ul>
<li>验证过程属于浏览器的动作，所以需要在客户端安装代理工具的证书</li>
</ul>
<p><img src="https://www.ibm.com/docs/en/SSZHJ2_9.3.0/securing/graphics/hndshake.jpg"></p>
<p>应用层HTTPS抓包原理</p>
<p><img src="https://cheapsslsecurity.com/blog/wp-content/uploads/2021/11/ssl-stripping-types-of-man-in-the-middle-attaccks.png" alt="Types of man in the middle attacks graphic: This diagram illustrates how SSL stripping works"></p>
<h3 id="Android10中间人抓包"><a href="#Android10中间人抓包" class="headerlink" title="Android10中间人抓包"></a>Android10中间人抓包</h3><blockquote>
<p>在<a href="https://developer.android.com/training/articles/security-config?hl=zh-cn#CustomTrust">谷歌官网中</a>，了解到在<code>Android6.0</code>之前，应用会默认信任用户添加的CA存储区，7.0以及之后则是默认信任系统预装的CA。所以才会出现有时候即使安装了证书，依然无法抓取https流量的问题。</p>
</blockquote>
<p><img src="/2022/11/28/AndroidSEC%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/image-20221203150937497.png" alt="image-20221203150937497"></p>
<p><strong>将证书安装至系统CA（此处以burp证书来说明）</strong></p>
<ol>
<li>证书格式转换</li>
</ol>
<p>burp导出后证书为<code>der</code>格式，将其转换为<code>pem</code>格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform DER -<span class="keyword">in</span> xxx.der -out xxx.pem</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>计算hash值并重命名</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -inform PEM -subject_hash_old -<span class="keyword">in</span> xxx.pem</span><br><span class="line"><span class="built_in">mv</span> xxx.pem 9a5ba575.0</span><br></pre></td></tr></table></figure>

<p><img src="/2022/11/28/AndroidSEC%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/image-20221203164113972.png" alt="image-20221203164113972"></p>
<ol start="3">
<li>推送至系统CA存储区域</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb push 9a5ba575.0 /sdcard/</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="built_in">mv</span> /sdcard/9a5ba575.0 /system/etc/security/cacerts</span><br></pre></td></tr></table></figure>

<h4 id="自动化推送证书"><a href="#自动化推送证书" class="headerlink" title="自动化推送证书"></a>自动化推送证书</h4><p>使用Magisk模块：<code>Move Certificates</code>，每次重启手机即可</p>
<p>官方的release可能有点问题，使用：<a href="https://github.com/Magisk-Modules-Repo/movecert/issues/12">https://github.com/Magisk-Modules-Repo/movecert/issues/12</a></p>
<p><img src="/2022/11/28/AndroidSEC%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/image-20221203174122097.png" alt="image-20221203174122097"></p>
<h4 id="使用Charles进行VPN抓包"><a href="#使用Charles进行VPN抓包" class="headerlink" title="使用Charles进行VPN抓包"></a>使用Charles进行VPN抓包</h4><p>参考学习：<a href="https://www.apicloud.com/blogDetails/9198">https://www.apicloud.com/blogDetails/9198</a></p>
<p>手机端安装<code>Postern</code>，一款Android的全局代理工具，使用此种抓包主要是绕过app的<code>NO_PROXY</code>模式。原理为：<strong>使用VPN抓包的原理是，先将手机请求导到VPN，再对VPN的网络进行Charles的代理，绕过了对App的代理检测。</strong></p>
<p>手机端导入证书</p>
<p><img src="/2022/11/28/AndroidSEC%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/image-20221203192502485.png" alt="image-20221203192502485"></p>
<p>在手机上浏览器访问<a href="http://charlesproxy.com/getssl%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E8%AF%81%E4%B9%A6%EF%BC%88%E9%9C%80%E8%A6%81%E5%88%B0%E8%AE%BE%E7%BD%AE%E9%87%8C%E9%9D%A2%E5%8E%BB%E5%AE%89%E8%A3%85%EF%BC%89">http://charlesproxy.com/getssl，下载安装证书（需要到设置里面去安装）</a></p>
<p><img src="/2022/11/28/AndroidSEC%E6%8A%93%E5%8C%85%E6%80%BB%E7%BB%93/image-20221203192630183.png" alt="image-20221203192630183"></p>
<h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><ul>
<li><p>双向校验</p>
<ul>
<li><p>客户端校验</p>
</li>
<li><p>服务端校验</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 服务端校验客户端</span></span><br><span class="line">400 Bad Request</span><br><span class="line">No required SSL certificate was sent</span><br></pre></td></tr></table></figure>

<ul>
<li>代理检测 &gt;&gt; VPN抓包绕过 &gt;&gt; VPN检测<ul>
<li>iptables绕过</li>
</ul>
</li>
<li>root检测<ul>
<li>编译aosp源码，修改设备指纹</li>
</ul>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://tech.meituan.com/2017/03/17/shark-sdk.html">https://tech.meituan.com/2017/03/17/shark-sdk.html</a></p>
<p><a href="https://www.jianshu.com/p/1dd77e56cc3c">Android中Https请求如何防止中间人攻击和Charles抓包原理 - 简书</a></p>
<p><a href="http://www.520monkey.com/archives/category/android%e6%8a%80%e6%9c%af%e7%af%87">Android技术篇 | 尼古拉斯.赵四</a></p>
<p><a href="https://evilpan.com/2023/01/30/android-iptables/">https://evilpan.com/2023/01/30/android-iptables/</a></p>
]]></content>
      <tags>
        <tag>AndroidSEC</tag>
      </tags>
  </entry>
  <entry>
    <title>Android应用安全分析案例0x01</title>
    <url>/2023/11/25/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B0x01/</url>
    <content><![CDATA[<blockquote>
<p>一道TCTF题目，解密db文件</p>
</blockquote>
<p><strong>target</strong>: 1.ab，一个Android的备份文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  ~/D/Doing  file 1.ab                                                                          (base)</span><br><span class="line">1.ab: Android Backup, version 2, Compressed, Not-Encrypted</span><br></pre></td></tr></table></figure>

<p>解压，使用<code>abe.jar</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  ~/D/D/1.ab_dir  java -jar ../abe.jar unpack 1.ab 1.tar                                        (base)</span><br><span class="line">0% 1% 2% 3% 4% 5% 6% 7% 8% 9% 10% 11% 12% 13% 14% 15% 16% 17% 18% 19% 20% 21% 22% 23% 24% 25% 26% 27% 28% 29% 30% 31% 32% 33% 34% 35% 36% 37% 38% 39% 40% 41% 42% 43% 44% 45% 46% 47% 48% 49% 50% 51% 52% 53% 54% 55% 56% 57% 58% 59% 60% 61% 62% 63% 64% 65% 66% 67% 68% 69% 70% 71% 72% 73% 74% 75% 76% 77% 78% 79% 80% 81% 82% 83% 84% 85% 86% 87% 88% 89% 90% 91% 92% 93% 94% 95% 96% 97% 98% 99% 100%</span><br><span class="line">9097216 bytes written to 1.tar.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压tar</span></span><br><span class="line">~/D/D/1.ab_dir  tar xvf 1.tar                                                                 (base)</span><br><span class="line">x apps/com.example.yaphetshan.tencentwelcome/a/base.apk</span><br><span class="line">x apps/com.example.yaphetshan.tencentwelcome/db/Demo.db</span><br><span class="line">x apps/com.example.yaphetshan.tencentwelcome/Encryto.db</span><br><span class="line">x apps/com.example.yaphetshan.tencentwelcome/_manifest </span><br><span class="line">    ~/D/D/1/a/com.example.yaphetshan.tencentwelcome  tree -NCfhl                                  (base)</span><br><span class="line">[ 192]  .</span><br><span class="line">├── [3.0K]  ./Encryto.db</span><br><span class="line">├── [1013]  ./_manifest</span><br><span class="line">├── [  96]  ./a</span><br><span class="line">│   └── [8.7M]  ./a/base.apk</span><br><span class="line">└── [  96]  ./db</span><br><span class="line">    └── [3.0K]  ./db/Demo.db</span><br><span class="line"></span><br><span class="line">3 directories, 4 files</span><br></pre></td></tr></table></figure>

<p>使用<code>逍遥模拟器</code>中的低版本系统，安装base.apk。<font color="red">失败</font>，创建Androidstudio模拟器继续</p>
<p><img src="/2023/11/25/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B0x01/2023-11-25-17-02-42-image.png"></p>
<p>无加固</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  ~/D/D/1/a/c/a  apkid base.apk                                                                 (base)</span><br><span class="line">[+] APKiD 2.1.5 :: from RedNaga :: rednaga.io</span><br><span class="line">[*] base.apk!classes.dex</span><br><span class="line"> |-&gt; compiler : dx</span><br></pre></td></tr></table></figure>

<p><code>Jadx</code>静态分析</p>
<p>可以发现登陆流程与数据库的生成过程是隔离的</p>
<p><img src="/2023/11/25/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B0x01/2023-11-26-00-23-45-image.png"></p>
<p>向表<code>TencentMicrMsg</code>中插入数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># objection</span></span><br><span class="line">  ~/D/Doing  frida-ps -U|grep tencent                (Python3.8)</span><br><span class="line">3551  com.example.yaphetshan.tencentwelcome</span><br><span class="line"><span class="comment"># objection explore by usb</span></span><br><span class="line">objection -g com.example.yaphetshan.tencentwelcome explore</span><br><span class="line"><span class="comment"># objection工作原理，存在进程直接attaching，没有那么进行spawned -d参数</span></span><br><span class="line">[debug] Attempting to attach to process: `com.example.yaphetshan.tencentwelcome`</span><br><span class="line">[debug] Unable to find process: `com.example.yaphetshan.tencentwelcome`, attempting spawn</span><br><span class="line">[debug] PID `4705` spawned, attaching...</span><br><span class="line">[debug] Resuming PID `4705`</span><br><span class="line"><span class="comment"># Wallbreaker进行内存dump</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/25/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B0x01/2023-11-26-14-28-34-image.png"></p>
<p>函数调用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">onCreate() &gt;&gt; a()</span><br><span class="line">class: aVar: com.example.yaphetshan.tencentwelcome.a.a()</span><br><span class="line">    &gt;&gt; aVar.a()</span><br><span class="line">    &gt;&gt; aVar.b()</span><br></pre></td></tr></table></figure>

<p>通过后续的了解，使用SQLiteCipher时，hook该函数<code>getWritableDatabase</code>获取其参数，<strong>主动调用</strong>即可拿到加密密码</p>
<p><img src="/2023/11/25/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B0x01/2023-12-09-17-51-06-image.png"></p>
<p>使用<code>ae56f99</code>打开即可</p>
<p><img src="/2023/11/25/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B0x01/2023-12-09-17-54-00-image.png"></p>
<p>Tctf{H3ll0_Do_Y0u_Lov3_Tenc3nt!}</p>
<h2 id="SQLite与SQLCipher食用"><a href="#SQLite与SQLCipher食用" class="headerlink" title="SQLite与SQLCipher食用"></a>SQLite与SQLCipher食用</h2><p>基本的用法很简单，创建SQL语句创建数据库即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">createBook</span> <span class="operator">=</span> <span class="string">&quot;create table Book(&quot;</span> + <span class="string">&quot;id integer primary key autoincrement,&quot;</span> + <span class="string">&quot;author text,&quot;</span> + <span class="string">&quot;price real,&quot;</span> + <span class="string">&quot;pages integer,&quot;</span> + <span class="string">&quot;name text)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyDatabaseHelper</span><span class="params">(<span class="meta">@Nullable</span> Context context, <span class="meta">@Nullable</span> String name, <span class="meta">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class="type">int</span> version)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(context, name, factory, version);</span><br><span class="line">    mContext = context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(SQLiteDatabase sqLiteDatabase)</span> &#123;</span><br><span class="line">    sqLiteDatabase.execSQL(createBook);</span><br><span class="line">    Toast.makeText(mContext, <span class="string">&quot;Create succeeded&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// MainActivity调用</span></span><br><span class="line">    <span class="type">MyDatabaseHelper</span> <span class="variable">dbHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyDatabaseHelper</span>(<span class="built_in">this</span>, <span class="string">&quot;BookStore.db&quot;</span>, <span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">    createDatabase.setOnClickListener(view -&gt; dbHelper.getWritableDatabase());</span><br></pre></td></tr></table></figure>

<p>SQLCipher，加密数据库</p>
<p>添加依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;net.zetetic:sqlcipher-android:4.5.2@aar&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;androidx.sqlite:sqlite:2.2.0&#x27;</span></span><br></pre></td></tr></table></figure>

<p>主要修改即在此增加了密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public SQLiteDatabase <span class="function"><span class="title">getWritableDatabase</span></span>() &#123;</span><br><span class="line">    SQLiteDatabase db = super.getWritableDatabase(KEY);</span><br><span class="line">    <span class="built_in">return</span> db;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public SQLiteDatabase <span class="function"><span class="title">getReadableDatabase</span></span>() &#123;</span><br><span class="line">    SQLiteDatabase db = super.getReadableDatabase(KEY);</span><br><span class="line">    <span class="built_in">return</span> db;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>DB Browser for SQLite</code>查看</p>
<p><img src="/2023/11/25/Android%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B0x01/2023-12-08-14-47-03-image.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>SQLCiphe，SQLite加密扩展</p>
<p><a href="https://www.zetetic.net/sqlcipher/">SQLCipher - Zetetic</a></p>
<p>第一行代码Android第三版</p>
<p><a href="https://www.52pojie.cn/thread-1291452-1-1.html">独家食用指南系列|Android端SQLCipher的攻与防新编 - 『移动安全区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p>
]]></content>
      <tags>
        <tag>AndroidSEC</tag>
        <tag>objection</tag>
      </tags>
  </entry>
  <entry>
    <title>Fuzzing技术文章整理</title>
    <url>/2022/12/15/Fuzzing%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h3><p><a href="https://paper.seebug.org/841/">https://paper.seebug.org/841/</a></p>
<p><a href="https://paper.seebug.org/842/">https://paper.seebug.org/842/</a></p>
<p>AFL技术白皮书</p>
<p><a href="https://lcamtuf.coredump.cx/afl/technical_details.txt">https://lcamtuf.coredump.cx/afl/technical_details.txt</a></p>
<p>AFL简单使用</p>
<p><a href="https://0xfocu5.github.io/posts/2ba75ee3/">https://0xfocu5.github.io/posts/2ba75ee3/</a></p>
<p>「afl++」fuzzing一个IoT二进制程序，文件fuzz</p>
<p><a href="https://blog.attify.com/fuzzing-iot-devices-part-1/">https://blog.attify.com/fuzzing-iot-devices-part-1/</a></p>
<p>「afl++」如何fuzz网络程序</p>
<p><a href="https://blog.attify.com/fuzzing-iot-binaries-with-afl-part-ii/">https://blog.attify.com/fuzzing-iot-binaries-with-afl-part-ii/</a></p>
<h3 id="Fuzzing技术综述"><a href="#Fuzzing技术综述" class="headerlink" title="Fuzzing技术综述"></a>Fuzzing技术综述</h3><p><a href="https://mp.weixin.qq.com/s/nREiT1Uj25igCMWu1kta9g">https://mp.weixin.qq.com/s/nREiT1Uj25igCMWu1kta9g</a></p>
<p>无源fuzz，arm平台</p>
<p><a href="https://mp.weixin.qq.com/s/G26MJOH4VPene1Sd_zjEQw">https://mp.weixin.qq.com/s/G26MJOH4VPene1Sd_zjEQw</a></p>
<p><a href="https://www.anquanke.com/post/id/230811#h2-3">https://www.anquanke.com/post/id/230811#h2-3</a></p>
]]></content>
      <tags>
        <tag>Fuzzing</tag>
      </tags>
  </entry>
  <entry>
    <title>UDS协议分析-Teslaaaaa</title>
    <url>/2023/02/13/UDS%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-Teslaaaaa/</url>
    <content><![CDATA[<p>一道贴近汽车的题目，如下说明提示</p>
<span id="more"></span>

<p><img src="/2023/02/13/UDS%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-Teslaaaaa/de8b3ecd94fb58757fcd6eff0d3e1066ba9ed5c9.jpg" alt="img"></p>
<p>打开附件，附件内容为一张图片和一个CAN日志文件</p>
<p><img src="/2023/02/13/UDS%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-Teslaaaaa/3bc9d6af9076efef871be5fcaf5f9fe1a02e2bbf.png" alt="image-20230213200616854"></p>
<p>这张图里给了几个信息</p>
<ul>
<li>可能正在固件升级</li>
<li>CAN通道</li>
</ul>
<p>另外一个附件经检查为<code>CANoe/CANalyzer</code>记录的<code>asc</code>日志文件。</p>
<p><img src="/2023/02/13/UDS%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-Teslaaaaa/image-20230213200840377.png" alt="loading-ag-593"></p>
<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>参考学习链接：</p>
<ul>
<li><p><a href="https://blog.csdn.net/zhyongquan/article/details/80212180">https://blog.csdn.net/zhyongquan/article/details/80212180</a></p>
</li>
<li><p><a href="https://blog.csdn.net/Breeze_CAT/article/details/106156567">https://blog.csdn.net/Breeze_CAT/article/details/106156567</a></p>
</li>
<li><p><a href="https://bbs.kanxue.com/thread-259472.htm">https://bbs.kanxue.com/thread-259472.htm</a></p>
</li>
<li><p><a href="https://blog.csdn.net/kalake/article/details/125984985">https://blog.csdn.net/kalake/article/details/125984985</a></p>
</li>
<li><p><a href="https://blog.csdn.net/chenguigan/article/details/95884739">https://blog.csdn.net/chenguigan/article/details/95884739</a></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_34414530/article/details/123610027">https://blog.csdn.net/qq_34414530/article/details/123610027</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/75047334">https://zhuanlan.zhihu.com/p/75047334</a></p>
</li>
<li><p>🌟<a href="https://blog.csdn.net/qfmzhu/article/details/105716337">https://blog.csdn.net/qfmzhu/article/details/105716337</a></p>
</li>
<li><p>ISO15765-2</p>
</li>
<li><p>ISO14229-1</p>
</li>
<li><p>UDS诊断协议</p>
</li>
<li><p>ASC文件格式</p>
</li>
</ul>
<p>关于这两个标准，去看官方发布的文档是最好不过了。简单说明一下：</p>
<ul>
<li>15765-2是网络层与传输层的标准，与数据传输相关。比如：帧格式、流控等等</li>
<li>14229-1是应用层的标准，定义了与诊断相关的服务。比如：会话模式、安全访问、等等一些服务定义</li>
</ul>
<p><img src="/2023/02/13/UDS%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-Teslaaaaa/07f9bbff203f8ccc1c0af89b1fd4b76082a6f49e.png" alt="在这里插入图片描述"></p>
<p>ASC文件是CANoe&#x2F;CANalyzer录制的报文日志，关于格式可以参考：《CAN_LOG_TRIGGER_ASC_Format.pdf》</p>
<p><strong>抖个机灵：<font color="red">ChatGPT</font>可以帮你很多</strong>😊，<strong>还有记得标准文件的附录</strong></p>
<h2 id="分析日志"><a href="#分析日志" class="headerlink" title="分析日志"></a>分析日志</h2><p>接下来就可以开始分析文件：ecu_can_log.asc</p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>文件起始是文件头，说明了该log文件的基本信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span> Thu Apr 2 10:37:15.950 am 2020</span><br><span class="line">base hex  timestamps absolute</span><br><span class="line">internal events logged</span><br><span class="line">版本号</span><br><span class="line">// version 8.2.1</span><br></pre></td></tr></table></figure>

<h3 id="Event-log"><a href="#Event-log" class="headerlink" title="Event log"></a>Event log</h3><p>[3e 80]，0x3e服务用来保持与服务在进行诊断会话，[3e 80]抑制正响应</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4.000621 1  7DF             Tx   d 8 02 3E 80 00 00 00 00 00  Length = 0 BitCount = 124 ID = 2015  // 1  OTP(01) Atom 7DF-&gt;7DF : SF Length:   02         [ 3E 80 ]</span><br><span class="line">4.005922 CAN 1 Status:chip status error active</span><br><span class="line">5.005922 CAN 1 Status:chip status error active</span><br><span class="line">6.005923 CAN 1 Status:chip status error active</span><br><span class="line">7.005923 CAN 1 Status:chip status error active</span><br><span class="line">8.000537 1  7DF             Tx   d 8 02 3E 80 00 00 00 00 00  Length = 0 BitCount = 124 ID = 2015  // 1  OTP(02) Atom 7DF-&gt;7DF : SF Length:   02         [ 3E 80 ]</span><br><span class="line">8.005923 CAN 1 Status:chip status error active</span><br><span class="line">9.005924 CAN 1 Status:chip status error active</span><br></pre></td></tr></table></figure>

<p>[10 02]，开启编程会话，并得倒了正响应，Rx的02后面四个字节为数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9.498709 1  7DF             Tx   d 8 02 10 02 AA AA AA AA AA  Length = 0 BitCount = 116 ID = 2015  // 1  OTP(03) Atom 7DF-&gt;7DF : SF Length:   02         [ 10 02 ]</span><br><span class="line">9.499693 1  7B0             Rx   d 8 06 50 02 00 32 01 F4 00  Length = 235910 BitCount = 122 ID = 1968</span><br></pre></td></tr></table></figure>

<p>[27 05]，安全访问服务。ECU默认被保护，想要解锁进入编程会话，需要安全验证，如下流程</p>
<ol>
<li>Tester发送[27 05]，请求安全验证，ECU返回正响应，seed&#x3D;0x11223344</li>
<li>Tester发送[27 06 EE DD CC BB]，key&#x3D;0xeeddccbb</li>
<li>ECU验证后，发送正响应，验证通过。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9.740585 1  730             Tx   d 8 02 27 05 AA AA AA AA AA  Length = 222015 BitCount = 114 ID = 1840</span><br><span class="line">9.741697 1  7B0             Rx   d 8 06 67 05 11 22 33 44 00  Length = 223910 BitCount = 116 ID = 1968</span><br><span class="line">9.782739 1  730             Tx   d 8 06 27 06 EE DD CC BB AA  Length = 226244 BitCount = 116 ID = 1840</span><br><span class="line">9.783703 1  7B0             Rx   d 8 02 67 06 00 00 00 00 00  Length = 235910 BitCount = 122 ID = 1968</span><br></pre></td></tr></table></figure>

<p>[10, 0D 31 01]，这不是单帧而是多帧的首帧。00D为数据长度（前一字节3-0+后一字节），0x31服务，例程控制，这里[31 00 <strong>FF 00</strong>]用来擦写内存，<font color="red">后面的格式咨询了同事，找了一些wp</font>：44表明地址和大小都是4字节。地址：0x08000000，大小：0x00002000</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9.788131 1  730             Tx   d 8 10 0D 31 01 FF 00 44 08  Length = 232000 BitCount = 119 ID = 1840</span><br><span class="line">9.788431 1  7B0             Rx   d 8 30 08 00 00 00 00 00 00  Length = 239910 BitCount = 124 ID = 1968</span><br><span class="line">9.788947 1  730             Tx   d 8 21 00 00 00 00 00 20 00  Length = 244244 BitCount = 125 ID = 1840</span><br><span class="line">9.789707 1  7B0             Rx   d 8 05 71 01 FF 00 00 00 00  Length = 233910 BitCount = 121 ID = 1968</span><br></pre></td></tr></table></figure>

<p>[34 00]同理，请求数据下载服务，地址，大小与上条相同。这里正响应：74 20 01 02，20:2表明maxNumberOfBlockLength参数字节长度，这里为01 02，即每次数据最多0x102字节</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9.791765 1  730             Tx   d 8 10 0B 34 00 44 08 00 00  Length = 236244 BitCount = 121 ID = 1840</span><br><span class="line">9.792061 1  7B0             Rx   d 8 30 08 00 00 00 00 00 00  Length = 239910 BitCount = 124 ID = 1968</span><br><span class="line">9.792625 1  730             Tx   d 8 21 00 00 00 20 00 AA AA  Length = 234244 BitCount = 120 ID = 1840</span><br><span class="line">9.793715 1  7B0             Rx   d 8 04 74 20 01 02 00 00 00  Length = 233910 BitCount = 121 ID = 1968</span><br></pre></td></tr></table></figure>

<p>[36 xx data]，0x36数据传输服务，xx为序列号，后面紧跟数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9.795696 1  730             Tx   d 8 10 82 36 01 28 04 00 20  Length = 232244 BitCount = 119 ID = 1840</span><br><span class="line">9.795987 1  7B0             Rx   d 8 30 08 00 00 00 00 00 00  Length = 239910 BitCount = 124 ID = 1968</span><br><span class="line">9.796548 1  730             Tx   d 8 21 45 01 00 08 21 03 00  Length = 236244 BitCount = 121 ID = 1840</span><br><span class="line">9.796790 1  730             Tx   d 8 22 08 23 03 00 08 27 03  Length = 236244 BitCount = 121 ID = 1840</span><br><span class="line">9.797030 1  730             Tx   d 8 23 00 08 2B 03 00 08 2F  Length = 234000 BitCount = 120 ID = 1840</span><br><span class="line">9.797278 1  730             Tx   d 8 24 03 00 08 00 00 00 00  Length = 242000 BitCount = 124 ID = 1840</span><br><span class="line">9.797526 1  730             Tx   d 8 25 00 00 00 00 00 00 00  Length = 242000 BitCount = 124 ID = 1840</span><br><span class="line">9.797770 1  730             Tx   d 8 26 00 00 00 00 00 33 03  Length = 238000 BitCount = 122 ID = 1840</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>[37 01]，下载完成，准备退出</p>
<p>[37 01 DF FF]，执行0xDFFF标志过程，不详</p>
<p>[11 01]，重启ECU</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10.314499 1  730             Tx   d 8 02 37 01 AA AA AA AA AA  Length = 222259 BitCount = 114 ID = 1840</span><br><span class="line">10.315695 1  7B0             Rx   d 8 06 77 01 C6 B6 5E 10 00  Length = 225910 BitCount = 117 ID = 1968</span><br><span class="line">10.318529 1  730             Tx   d 8 04 31 01 DF FF AA AA AA  Length = 226244 BitCount = 116 ID = 1840</span><br><span class="line">10.319707 1  7B0             Rx   d 8 03 7F 31 78 00 00 00 00  Length = 233910 BitCount = 121 ID = 1968</span><br><span class="line">10.320695 1  7B0             Rx   d 8 05 71 01 DF FF 00 00 00  Length = 233910 BitCount = 121 ID = 1968</span><br><span class="line">10.322633 1  730             Tx   d 8 04 31 01 FF 01 AA AA AA  Length = 226244 BitCount = 116 ID = 1840</span><br><span class="line">10.323695 1  7B0             Rx   d 8 05 71 01 FF 01 00 00 00  Length = 233910 BitCount = 121 ID = 1968</span><br><span class="line">10.325697 1  7DF             Tx   d 8 02 11 01 AA AA AA AA AA  Length = 0 BitCount = 115 ID = 2015  // 1  OTP(04) Atom 7DF-&gt;7DF : SF Length:   02         [ 11 01 ]</span><br><span class="line">10.326689 1  7B0             Rx   d 8 03 7F 11 78 00 00 00 00  Length = 233910 BitCount = 121 ID = 1968</span><br><span class="line">11.005924 CAN 1 Status:chip status error active</span><br><span class="line">11.326752 1  7B0             Rx   d 8 02 51 01 00 00 00 00 00  Length = 235910 BitCount = 122 ID = 1968</span><br><span class="line">12.000742 1  7DF             Tx   d 8 02 3E 80 00 00 00 00 00  Length = 0 BitCount = 124 ID = 2015  // 1  OTP(05) Atom 7DF-&gt;7DF : SF Length:   02         [ 3E 80 ]</span><br><span class="line">12.005925 CAN 1 Status:chip status error active</span><br><span class="line">13.005925 CAN 1 Status:chip status error active</span><br><span class="line">14.005925 CAN 1 Status:chip status error active</span><br><span class="line">15.005926 CAN 1 Status:chip status error active</span><br><span class="line">16.000532 1  7DF             Tx   d 8 02 3E 80 00 00 00 00 00  Length = 0 BitCount = 124 ID = 2015  // 1  OTP(06) Atom 7DF-&gt;7DF : SF Length:   02         [ 3E 80 ]</span><br><span class="line">16.005926 CAN 1 Status:chip status error active</span><br></pre></td></tr></table></figure>

<p>汽车ECU为ARM，0x08000000地址一般为第二BootLoader地址，载入ECU，需要关注写入0x08000000地址的数据。</p>
<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><p>首先将数据传送区域的数据筛选出来，删除Rx行已经Tx行无关数据</p>
<p><img src="/2023/02/13/UDS%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-Teslaaaaa/8f85b1a81f3fb49ee2000432b8f3bfc5974707b7.png" alt="image-20230214230612177"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文本文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;can_log2.asc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配包含 Rx 的行</span></span><br><span class="line">rx_pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;.*Rx.*&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lines)):</span><br><span class="line">    <span class="keyword">if</span> rx_pattern.<span class="keyword">match</span>(lines[i]):</span><br><span class="line">        lines[i] = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于每一行，提取目标字符串并写回文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;can_log2_1.asc&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">r&quot;d 8 (.*) Length&quot;</span>, line)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            target_str = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            f.write(target_str + <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>接着开始提取CAN数据字节流，这里有一个情况：10开头，则只有后四个字节可以写入，2x则可以写入7个字节。后续在处理时发现许多填充字节，修改：每次block只有0x80有效字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开文件并读取内容</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;can_log2_1.asc&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理每一行数据</span></span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> content:</span><br><span class="line">    <span class="comment"># 去掉每行末尾的换行符</span></span><br><span class="line">    line = line.strip()</span><br><span class="line">    <span class="comment"># 将每行字符串按照空格分割成一个列表</span></span><br><span class="line">    line_list = line.split()</span><br><span class="line">    <span class="comment"># 将每行分割后的列表添加到结果列表中</span></span><br><span class="line">    result.append(line_list)</span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">result_hex = []</span><br><span class="line"><span class="keyword">for</span> line_list <span class="keyword">in</span> result:</span><br><span class="line">    <span class="keyword">if</span> line_list[<span class="number">0</span>] == <span class="string">&#x27;10&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> line_list[<span class="number">4</span>:<span class="number">8</span>]:</span><br><span class="line">            result_hex.append(line)</span><br><span class="line">    <span class="keyword">elif</span> line_list[<span class="number">0</span>] == <span class="string">&#x27;22&#x27;</span>:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> line_list[<span class="number">1</span>:<span class="number">6</span>]:</span><br><span class="line">            result_hex.append(line)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> line_list[<span class="number">1</span>:<span class="number">8</span>]:</span><br><span class="line">            result_hex.append(line)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> result_hex:</span><br><span class="line">        binary_data = <span class="built_in">bytes</span>.fromhex(data)</span><br><span class="line">        f_out.write(binary_data)</span><br></pre></td></tr></table></figure>

<h3 id="二进制分析"><a href="#二进制分析" class="headerlink" title="二进制分析"></a>二进制分析</h3><p>以arm反汇编载入，地址0x08000000，小端序。载入后切换为<code>option+G</code>切换为THUMB模式，反汇编即可</p>
<p>C：code</p>
<p>D：data</p>
<p>U：undefined</p>
<p>P：create function</p>
<p><img src="/2023/02/13/UDS%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-Teslaaaaa/43e8c24c662faf48598cfaf64b882934e7628c26.png" alt="image-20230215104546746"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> __noreturn <span class="title function_">sub_8000138</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// r0</span></span><br><span class="line">  _BYTE v1[<span class="number">48</span>]; <span class="comment">// [sp-30h] [bp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v0 = sub_800123E(v1, <span class="number">48</span>);</span><br><span class="line">  sub_800033C(v0);</span><br><span class="line">  sub_8000430(<span class="number">1073821696</span>, <span class="string">&quot;Welcome challenger!\r\n&quot;</span>);</span><br><span class="line">  sub_8000430(<span class="number">1073821696</span>, <span class="string">&quot;The flag is:\r\n&quot;</span>);</span><br><span class="line">  sub_8000168(v1);</span><br><span class="line">  sub_8000430(<span class="number">1073821696</span>, v1);</span><br><span class="line">  sub_8000430(<span class="number">1073821696</span>, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很容易猜测，6行进行v1初始化，而sub_8000430是一个log函数，主要处理逻辑在：<code>sub_800168</code>里面</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_8000168</span><span class="params">(_BYTE *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">char</span> v3[<span class="number">52</span>]; <span class="comment">// [sp+4h] [bp-34h] BYREF</span></span><br><span class="line"></span><br><span class="line">  sub_800120C(v3, <span class="string">&quot;flag&#123;canoecr7-zd9h-1emi-or8m-f8vm2od81nfk&#125;&quot;</span>, <span class="number">44</span>);</span><br><span class="line">  <span class="comment">// 拷贝v3到a1，即是对该字符串的处理过程</span></span><br><span class="line">  sub_8001256(a1, v3);</span><br><span class="line">  a1 += <span class="number">5</span>;</span><br><span class="line">  a1[<span class="number">2</span>] -= <span class="number">13</span>;</span><br><span class="line">  a1[<span class="number">11</span>] -= <span class="number">5</span>;</span><br><span class="line">  a1[<span class="number">15</span>] -= <span class="number">44</span>;</span><br><span class="line">  a1[<span class="number">3</span>] -= <span class="number">11</span>;</span><br><span class="line">  a1[<span class="number">5</span>] -= <span class="number">48</span>;</span><br><span class="line">  a1[<span class="number">7</span>] += <span class="number">43</span>;</span><br><span class="line">  a1[<span class="number">28</span>] += <span class="number">50</span>;</span><br><span class="line">  a1[<span class="number">31</span>] += <span class="number">46</span>;</span><br><span class="line">  a1[<span class="number">19</span>] -= <span class="number">13</span>;</span><br><span class="line">  a1[<span class="number">20</span>] -= <span class="number">66</span>;</span><br><span class="line">  a1[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">  a1[<span class="number">29</span>] -= <span class="number">55</span>;</span><br><span class="line">  a1[<span class="number">24</span>] -= <span class="number">51</span>;</span><br><span class="line">  a1[<span class="number">9</span>] -= <span class="number">23</span>;</span><br><span class="line">  a1[<span class="number">25</span>] -= <span class="number">6</span>;</span><br><span class="line">  a1[<span class="number">27</span>] -= <span class="number">60</span>;</span><br><span class="line">  a1[<span class="number">4</span>] -= <span class="number">52</span>;</span><br><span class="line">  a1[<span class="number">6</span>] -= <span class="number">14</span>;</span><br><span class="line">  a1[<span class="number">30</span>] -= <span class="number">52</span>;</span><br><span class="line">  a1[<span class="number">22</span>] -= <span class="number">58</span>;</span><br><span class="line">  a1[<span class="number">12</span>] -= <span class="number">48</span>;</span><br><span class="line">  a1[<span class="number">16</span>] -= <span class="number">56</span>;</span><br><span class="line">  a1[<span class="number">34</span>] -= <span class="number">53</span>;</span><br><span class="line">  *a1 -= <span class="number">48</span>;</span><br><span class="line">  a1[<span class="number">14</span>] += <span class="number">3</span>;</span><br><span class="line">  a1[<span class="number">17</span>] -= <span class="number">5</span>;</span><br><span class="line">  a1[<span class="number">33</span>] -= <span class="number">55</span>;</span><br><span class="line">  a1[<span class="number">35</span>] -= <span class="number">56</span>;</span><br><span class="line">  a1[<span class="number">10</span>] -= <span class="number">2</span>;</span><br><span class="line">  a1[<span class="number">26</span>] -= <span class="number">67</span>;</span><br><span class="line">  result = (<span class="type">unsigned</span> __int8)a1[<span class="number">21</span>] - <span class="number">6</span>;</span><br><span class="line">  a1[<span class="number">21</span>] = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>如下:</p>
<p><img src="/2023/02/13/UDS%E5%8D%8F%E8%AE%AE%E5%88%86%E6%9E%90-Teslaaaaa/1d85c1ad3a05bb221511ff2c28df6423b19ee4c3.png" alt="image-20230215131140321"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> org_str[] = <span class="string">&quot;canoecr7-zd9h-1emi-or8m-f8vm2od81nfk&quot;</span>;</span><br><span class="line">org_str[<span class="number">2</span>] -= <span class="number">13</span>;</span><br><span class="line">org_str[<span class="number">11</span>] -= <span class="number">5</span>;</span><br><span class="line">org_str[<span class="number">15</span>] -= <span class="number">44</span>;</span><br><span class="line">org_str[<span class="number">3</span>] -= <span class="number">11</span>;</span><br><span class="line">org_str[<span class="number">5</span>] -= <span class="number">48</span>;</span><br><span class="line">org_str[<span class="number">7</span>] += <span class="number">43</span>;</span><br><span class="line">org_str[<span class="number">28</span>] += <span class="number">50</span>;</span><br><span class="line">org_str[<span class="number">31</span>] += <span class="number">46</span>;</span><br><span class="line">org_str[<span class="number">19</span>] -= <span class="number">13</span>;</span><br><span class="line">org_str[<span class="number">20</span>] -= <span class="number">66</span>;</span><br><span class="line">org_str[<span class="number">1</span>] += <span class="number">3</span>;</span><br><span class="line">org_str[<span class="number">29</span>] -= <span class="number">55</span>;</span><br><span class="line">org_str[<span class="number">24</span>] -= <span class="number">51</span>;</span><br><span class="line">org_str[<span class="number">9</span>] -= <span class="number">23</span>;</span><br><span class="line">org_str[<span class="number">25</span>] -= <span class="number">6</span>;</span><br><span class="line">org_str[<span class="number">27</span>] -= <span class="number">60</span>;</span><br><span class="line">org_str[<span class="number">4</span>] -= <span class="number">52</span>;</span><br><span class="line">org_str[<span class="number">6</span>] -= <span class="number">14</span>;</span><br><span class="line">org_str[<span class="number">30</span>] -= <span class="number">52</span>;</span><br><span class="line">org_str[<span class="number">22</span>] -= <span class="number">58</span>;</span><br><span class="line">org_str[<span class="number">12</span>] -= <span class="number">48</span>;</span><br><span class="line">org_str[<span class="number">16</span>] -= <span class="number">56</span>;</span><br><span class="line">org_str[<span class="number">34</span>] -= <span class="number">53</span>;</span><br><span class="line">org_str[<span class="number">0</span>] -= <span class="number">48</span>;</span><br><span class="line">org_str[<span class="number">14</span>] += <span class="number">3</span>;</span><br><span class="line">org_str[<span class="number">17</span>] -= <span class="number">5</span>;</span><br><span class="line">org_str[<span class="number">33</span>] -= <span class="number">55</span>;</span><br><span class="line">org_str[<span class="number">35</span>] -= <span class="number">56</span>;</span><br><span class="line">org_str[<span class="number">10</span>] -= <span class="number">2</span>;</span><br><span class="line">org_str[<span class="number">26</span>] -= <span class="number">67</span>;</span><br><span class="line">org_str[<span class="number">21</span>] -= <span class="number">6</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag: %s\n&quot;</span>, org_str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="unicorn模拟执行"><a href="#unicorn模拟执行" class="headerlink" title="unicorn模拟执行"></a>unicorn模拟执行</h3><p>需要的几个组件，有时间看一下官方文档</p>
<ul>
<li><p>sark</p>
</li>
<li><p>idaPython</p>
</li>
<li><p>unicorn</p>
</li>
</ul>
<hr>
<p>2023&#x2F;06&#x2F;11更新：</p>
<p>在了解完Qiling后，尝试使用Qiling来模拟</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一道好题，记录一下</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://bbs.kanxue.com/thread-274828.htm">https://bbs.kanxue.com/thread-274828.htm</a></p>
]]></content>
      <tags>
        <tag>AutoSec</tag>
      </tags>
  </entry>
  <entry>
    <title>USB接口安全测试</title>
    <url>/2023/11/14/USB%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>USB已经成为计算机与智能设备的必备接口之一，广泛应用于社会的各个场景。近年来各类硬件产品的安全事件层出不穷，出现了多种针对USB接口的攻击手段，导致相关系统面临着严重的安全风险。简要对于<code>USB</code>接口存在的安全问题进行梳理，并进行测试。</p>
<h2 id="USB-101"><a href="#USB-101" class="headerlink" title="USB 101"></a>USB 101</h2><p><img src="https://www.usbzh.com/uploadimg/202105080959336094.png" alt="USB协议分层"></p>
<p>USB设备的枚举过程如下：</p>
<ol>
<li>USB设备插入USB接口后，主机检测D+&#x2F;D-线上的电压，确认有设备连接，USB<a href="https://www.usbzh.com/article/detail-25.html">集线器</a>通过中断<a href="https://www.usbzh.com/article/detail-450.html">IN</a>通道，向主机报告有USB设备连接。</li>
<li>主机接到通知后，通过<a href="https://www.usbzh.com/article/detail-25.html">集线器</a>设备类请求<a href="https://www.usbzh.com/article/detail-1162.html">GetPortStatus</a>获取更多的信息。然后主机等待100ms等待设备稳定，然后发送<a href="https://www.usbzh.com/article/detail-25.html">集线器</a>设备类请求SetPortStatus,对USB设备进行复位，复位后USB设备的地址为0，这样主机就可以使用地址0与USB设备进行通信,复位后的设备可以从USB总线上获取小于100mA的电流，用于使用默认地址对管道0控制<a href="https://www.usbzh.com/article/detail-691.html">事务</a>响应。</li>
<li>主机向地址为0（即刚插入的USB设备）的设备端点0（默认端点）发送获取<a href="https://www.usbzh.com/article/detail-104.html">设备描述符</a>的<a href="https://www.usbzh.com/article/detail-417.html">标准请求</a>GetDescriptor。</li>
<li>USB设备收到请求后，将其预设的<a href="https://www.usbzh.com/article/detail-104.html">设备描述符</a>返回给主机。</li>
<li>主机收到设备描述符后，返回一个0长度的数据确认包。</li>
<li>主机对设备再次复位，复位后主机对地址为0的设备端点0发送一个设置地址SetAddress请求（新的设备地址在数据包中）。</li>
<li>主机发送请求状态返回，设备返回0长度的状态数据包。</li>
<li>主机收到状态数据包后，发送应答包<a href="https://www.usbzh.com/article/detail-452.html">ACK</a>给设备，设备收到<a href="https://www.usbzh.com/article/detail-452.html">ACK</a>后，启用新的设备地址。</li>
<li>主机再次使新的地址获取设备描述符GetDescriptor，设备返回地址描述符。</li>
<li>主机获取第一次<a href="https://www.usbzh.com/article/detail-67.html">配置描述符</a>有前18个字节，设备返回<a href="https://www.usbzh.com/article/detail-67.html">配置描述符</a>的前18个字节，其数据包中含有配置描述符的总长度。</li>
<li>主机根据配置描述符的总长度再次获取配置描述符，设备返回全总的配置描述符。</li>
<li>如果还有<a href="https://www.usbzh.com/article/detail-53.html">字符串描述符</a>，系统还会获取<a href="https://www.usbzh.com/article/detail-53.html">字符串描述符</a>。像<a href="https://www.usbzh.com/article/detail-76.html">HID</a>设备还有<a href="https://www.usbzh.com/article/detail-48.html">报告描述符</a>，它也需要单独获取。</li>
</ol>
<h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><h3 id="Facedancer"><a href="#Facedancer" class="headerlink" title="Facedancer"></a>Facedancer</h3><blockquote>
<p>a tool for implementing USB devices in host-side Python using the GoodFET framework. Access to the USB chip is extremely low-level, so protocols may be mis-implemented in all sorts of creative ways. This allows a clever neighbor to quickly find and exploit USB driver vulnerabilities from the comfort of a modern workstation, only later porting such exploits to run standalone. Additionally, we’ll show you some nifty tricks for replacing the firmware of commercial USB devices in order to house your exploits.</p>
</blockquote>
<p><img src="http://farm6.staticflickr.com/5333/7397758016_7b01d44ca9.jpg" alt="Facedancer10"></p>
<p>使用<code>GoodFET</code>框架，在主机端使用Python实现了USB</p>
<p>使用教程</p>
<ol>
<li>首先更新firmware</li>
</ol>
<ul>
<li><p><a href="https://github.com/travisgoodspeed/goodfet/">GitHub - travisgoodspeed&#x2F;goodfet: An embedded bus adapter for various microcontrollers and radios.</a></p>
</li>
<li><p><a href="https://github.com/greatscottgadgets/Facedancer">GitHub - greatscottgadgets&#x2F;Facedancer: modern FaceDancer core for multiple devices– including GreatFET</a></p>
</li>
</ul>
<blockquote>
<p>In Linux, the FTDI drivers are included by default. Be sure that the user has permissions for <code>/dev/ttyUSB0</code>, which will likely require adding that user to the dialout group.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y gcc-msp430 msp430-libc curl wget python-serial <span class="comment"># Ubuntu Xenial</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>由于需要<code>/dev/ttyUSB0</code>权限，将用户加入组中</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -a -G dialout w3b5h3ll</span><br></pre></td></tr></table></figure>

<p>刷写过程(环境：<code>Python2.7</code>+双头<code>USB mini</code>接口)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(base) w3b5h3ll@ubuntu:~/goodfet/firmware$ board=facedancer21 goodfet.bsl --dumpinfo &gt; info.txt</span><br><span class="line">Use -h <span class="keyword">for</span> <span class="built_in">help</span></span><br><span class="line">Use --fromweb to upgrade a GoodFET.</span><br><span class="line">MSP430 Bootstrap Loader Version: 1.39-goodfet-8</span><br><span class="line">Invoking BSL...</span><br><span class="line">Transmit default password ...</span><br><span class="line">Current bootstrap loader version: 2.13 (Device ID: f26f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># update 2023/11</span></span><br><span class="line"><span class="built_in">export</span> board=facedancer21</span><br><span class="line">make</span><br><span class="line">goodfet.bsl ./goodfet.hex</span><br></pre></td></tr></table></figure>

<h3 id="RubberDucky"><a href="#RubberDucky" class="headerlink" title="RubberDucky"></a>RubberDucky</h3><p>一款可以执行<code>HID</code>键盘注入的工具</p>
<ul>
<li><a href="https://docs.hak5.org/hak5-usb-rubber-ducky/">USB Rubber Ducky by Hak5 - USB Rubber Ducky</a></li>
</ul>
<p><img src="https://shop.hak5.org/cdn/shop/products/usb-rubber-ducky_mk2_2000x.jpg?v=1659974440" alt="USB Rubber Ducky"></p>
<p>Hak5有自己的脚本语言<code>DuckyScript</code>，官方也提供了诸多Payloads使用</p>
<ul>
<li><a href="https://github.com/hak5/usbrubberducky-payloads/">GitHub - hak5&#x2F;usbrubberducky-payloads: The Official USB Rubber Ducky Payload Repository</a></li>
</ul>
<p>使用在线IDE进行编译，烧录，将<code>inject.bin</code>拷贝至其根目录即可。想要返回<code>Arming mode</code>：拆件，插入电脑后，按压按钮即可</p>
<ul>
<li><a href="https://payloadstudio.hak5.org/community/">https://payloadstudio.hak5.org/community/</a></li>
</ul>
<h3 id="BushBunny"><a href="#BushBunny" class="headerlink" title="BushBunny"></a>BushBunny</h3><p>同为Hak5的产品，<code>Bash Bunny</code>更贵，介绍上说比前者更加强大，是一个完整的Linux系统。</p>
<ul>
<li><p><a href="https://docs.hak5.org/bash-bunny/">Bash Bunny by Hak5 - Bash Bunny</a></p>
</li>
<li><p><a href="https://hackinglab.cz/en/blog/bash-bunny-guide/">Bash Bunny – Guide - Hacking Lab</a></p>
</li>
</ul>
<p><img src="https://3076592524-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FnxJgJ9UdPfrcuL1U8DpL%2Fuploads%2FNY6fwd09yUtu3sRsbNJe%2Fimage.png?alt=media&token=d0880bb8-0e9b-41bd-809e-d3724c8fe234"></p>
<p>切换到<code>Arming Mode</code>后，串口进入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">picocom -b 115200 /dev/tty.usbmodemch0000011</span><br><span class="line">root:hak5bunny</span><br></pre></td></tr></table></figure>

<p>同时其作为存储设备，如下目录</p>
<p><img src="/2023/11/14/USB%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/2023-11-09-16-05-30-image.png"></p>
<h2 id="攻击面分析"><a href="#攻击面分析" class="headerlink" title="攻击面分析"></a>攻击面分析</h2><p><img src="/2023/11/14/USB%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/2023-11-09-12-56-02-image.png"></p>
<h3 id="攻击负载媒介"><a href="#攻击负载媒介" class="headerlink" title="攻击负载媒介"></a>攻击负载媒介</h3><p>非常典型有震网病毒，通过U盘即突破了物理隔离，不做详细展开</p>
<p><img src="https://s.secrss.com/anquanneican/702f33f11f8bf9226bb4185e124fefb3.jpg"></p>
<h3 id="HID攻击"><a href="#HID攻击" class="headerlink" title="HID攻击"></a>HID攻击</h3><blockquote>
<p>USB人机交互设备（Human Interface Device，HID）是一种非常重要和广泛使用的USB设备类型，被广泛应用于人机交互和少量实时数据传输中，例如键盘、鼠标、游戏杆等应用场景. USB HID设备最主要的特点是可以模拟人和机器的交互过程，能够主动地向连接的主机中传输数据和命令. 同时，基于USB HID协议中的约定，USB HID设备无须安装驱动就能与主机进行交互.</p>
</blockquote>
<p>基于HID的攻击有如下特点：</p>
<ul>
<li><p>隐蔽性强。攻击原理是模仿用户按键操作，系统不会对输入进行审计。另外恶意代码被隐藏在了芯片的固件中，上层杀软无法进行检测。</p>
</li>
<li><p>更高权限。可以获取系统权限。</p>
</li>
</ul>
<p>常见USB HID开发平台</p>
<p><img src="/2023/11/14/USB%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/2023-11-09-13-17-25-image.png"></p>
<p>想要实现<code>HID</code>攻击，设备需要支持<code>Keyboard</code>等人机交互接口类型。利用<code>Umap2</code>框架，可以对目标进行一个初步的USB安全评估（注：该工具需要使用<code>Python2.7</code>启动）</p>
<ul>
<li><a href="https://github.com/nccgroup/umap2">GitHub - nccgroup&#x2F;umap2: Umap2 is the second revision of NCC Group’s python based USB host security assessment tool.</a></li>
</ul>
<p>Device Emulation</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取支持的设备类型</span></span><br><span class="line">↪ umap2list                                                                          (base)</span><br><span class="line">audio</span><br><span class="line">billboard</span><br><span class="line">cdc_acm</span><br><span class="line">ftdi</span><br><span class="line">hub</span><br><span class="line">keyboard</span><br><span class="line">mass_storage</span><br><span class="line">mtp</span><br><span class="line">printer</span><br><span class="line">smartcard</span><br><span class="line"><span class="comment"># emulate -C keyboard</span></span><br><span class="line">umap2emulate -P fd:/dev/tty.usbserial-A10LLJBV -C keyboard -v</span><br></pre></td></tr></table></figure>

<p>Device Support Scanning</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Umap2 can attempt to detect what types of USB devices are supported by the host. </span></span><br><span class="line">umap2scan -P fd:/dev/tty.usbserial-A10LLJBV</span><br></pre></td></tr></table></figure>

<p>确认一下<code>facedancer</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsusb</span><br><span class="line">Bus 020 Device 012: ID 0403:6001 Future Technology Devices International Limited FT232R USB UART  Serial: A10LLJBV</span><br></pre></td></tr></table></figure>

<p>Vendor Specific Device Support Scanning 厂商设备支持扫描</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># timeout设置5s，条目间隔2s</span></span><br><span class="line">umap2vsscan -P fd:/dev/tty.usbserial-A10LLJBV -d ~/Desktop/MyRepos/umap2/data/vid_pid_db.py -t 5 -b 2</span><br></pre></td></tr></table></figure>

<p>经测试，发现如下，目标支持4种类型：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Found 4 supported device(s):</span><br><span class="line">1.audio</span><br><span class="line">2.hub</span><br><span class="line">3.keyboard</span><br><span class="line">4.mass storage</span><br></pre></td></tr></table></figure>

<h4 id="Demo01-Nmap扫描"><a href="#Demo01-Nmap扫描" class="headerlink" title="Demo01: Nmap扫描"></a>Demo01: Nmap扫描</h4><p>Win10支持<code>RNDIS</code>，即USB网卡，那么可以使用<code>BushBunny</code>配置为相关模式后扫描目标主机</p>
<blockquote>
<p>RNDIS（Remote Network Driver Interface Specification，远程网络驱动接口规范）是一个通信协议。它是<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BD%AF%E5%85%AC%E5%8F%B8" title="微软公司">微软公司</a>的<a href="https://zh.wikipedia.org/w/index.php?title=%E4%B8%93%E5%88%A9%E5%8D%8F%E8%AE%AE&action=edit&redlink=1">专利协议</a>，被大多数<a href="https://zh.wikipedia.org/wiki/Windows" title="Windows">Windows</a>、<a href="https://zh.wikipedia.org/wiki/Linux" title="Linux">Linux</a>和<a href="https://zh.wikipedia.org/wiki/Unix" title="Unix">Unix</a>系统所支持。它主要使用<a href="https://zh.wikipedia.org/wiki/USB" title="USB">USB</a>协议作为其下层传输，它向上层提供虚拟的<a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%BD%91" title="以太网">以太网</a>连接。</p>
</blockquote>
<p>Payload如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Title:         Nmapper for Bash Bunny</span></span><br><span class="line"><span class="comment"># Author:        Hak5Darren</span></span><br><span class="line"><span class="comment"># Version:       1.1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Scans target with nmap using specified options</span></span><br><span class="line"><span class="comment"># Saves sequential logs to mass storage loot folder</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Red ...........Setup</span></span><br><span class="line"><span class="comment"># Red Blinking...Setup Failed. Target did not obtain IP address. Exit.</span></span><br><span class="line"><span class="comment"># Amber..........Scanning</span></span><br><span class="line"><span class="comment"># White..........Switching to Mass Storage (optional)</span></span><br><span class="line"><span class="comment"># Green..........Finished</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># See nmap --help for options. Default &quot;-O --fuzzy&quot; profiles target OS.</span></span><br><span class="line">NMAP_OPTIONS=<span class="string">&quot;-O --fuzzy&quot;</span></span><br><span class="line">LOOTDIR=/root/udisk/loot/nmap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######## INITIALIZATION ########</span></span><br><span class="line">LED SETUP</span><br><span class="line"><span class="comment"># Use RNDIS for Windows. Mac/*nix use ECM_ETHERNET</span></span><br><span class="line">ATTACKMODE RNDIS_ETHERNET </span><br><span class="line"><span class="comment">#ATTACKMODE ECM_ETHERNET</span></span><br><span class="line">GET TARGET_IP</span><br><span class="line">GET TARGET_HOSTNAME</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######## MAKE LOOT DIRECTORY ########</span></span><br><span class="line"><span class="comment"># Setup named logs in loot directory</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="variable">$LOOTDIR</span></span><br><span class="line">HOST=<span class="variable">$&#123;TARGET_HOSTNAME&#125;</span></span><br><span class="line"><span class="comment"># If hostname is blank set it to &quot;noname&quot;</span></span><br><span class="line">[[ -z <span class="string">&quot;<span class="variable">$HOST</span>&quot;</span> ]] &amp;&amp; HOST=<span class="string">&quot;noname&quot;</span></span><br><span class="line">COUNT=$(<span class="built_in">ls</span> -lad <span class="variable">$LOOTDIR</span>/<span class="variable">$HOST</span>*.<span class="built_in">log</span> | <span class="built_in">wc</span> -l)</span><br><span class="line">COUNT=$((COUNT+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######## ERROR IF NO TARGET IP ########</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;TARGET_IP&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    LED FAIL</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######## ATTACK ########</span></span><br><span class="line">LED ATTACK</span><br><span class="line">nmap <span class="variable">$NMAP_OPTIONS</span> <span class="variable">$TARGET_IP</span> &gt;&gt; <span class="variable">$LOOTDIR</span>/<span class="variable">$HOST</span>-<span class="variable">$COUNT</span>.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######## CLEANUP ########</span></span><br><span class="line">LED CLEANUP</span><br><span class="line"><span class="built_in">sync</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######## FINISH ########</span></span><br><span class="line">LED FINISH</span><br></pre></td></tr></table></figure>

<p>扫描结果</p>
<p><img src="/2023/11/14/USB%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/2023-11-10-15-44-37-image.png"></p>
<h4 id="Demo02"><a href="#Demo02" class="headerlink" title="Demo02:"></a>Demo02:</h4><p>查看、分析针对<code>Android/Linux</code>平台的payload，描绘攻击路径。（未有可直接使用<code>Android</code>平台Payload，待开发）</p>
<h3 id="BadUSB"><a href="#BadUSB" class="headerlink" title="BadUSB"></a>BadUSB</h3><p>对USB HID技术的改进。原有技术依赖于特定的嵌入式开发版，无法在通用USB设备上实现。存在局限性：无法通用；容易被破除设备封装等检测方式发现。</p>
<p>BadUSB攻击的基本思路是<strong>篡改USB设备中的原有固件，将含有攻击负载的内容写入到设备固件中，从而使得USB设备在接入到目标主机时，通过执行固件中的攻击负载实现攻击功能</strong>. BadUSB攻击的实现虽然需要USB设备支持固件更新这一前提，但是仍然比USB HID攻击具有更好的通用性（据Karsten Nohl称，BadUSB首次提出时可以适用的优盘占当时市场份额的50%以上另外，由于BadUSB攻击实现过程中仅对存储器芯片中存放的固件进行了篡改，并不对USB设备硬件进行任何改变，所以该类攻击的隐蔽性更高.</p>
<p>BadUSB攻击的出现，不仅仅是在通用性和隐蔽性上对USB HID攻击进行了改进，而且通过篡改设备固件，为攻击者提供了更多的攻击选择. 一方面，攻击者通过修改固件，能够执行的操作不仅仅局限在模拟HID操作，通过借助USB设备控制器可以实现更多的复杂操作；另一方面，具有不同类型和功能配置的USB设备给攻击者提供了更多可能性，例如<strong>攻击者通过对设备固件的篡改，可控制USB网卡设备中本身具备的网络适配器，从而可实现对目标主机网络流量的劫持和监控；还可以通过控制USB存储设备的存储器，实现对目标主机敏感信息的提取和隐蔽存储等.</strong></p>
<h3 id="驱动漏洞利用"><a href="#驱动漏洞利用" class="headerlink" title="驱动漏洞利用"></a>驱动漏洞利用</h3><p>此部分涉及USB模糊测试相关内容</p>
<h3 id="USB接口监听"><a href="#USB接口监听" class="headerlink" title="USB接口监听"></a>USB接口监听</h3><p>想要对USB接口流量进行<code>sniff</code>，一般<code>Linux</code>系统需要通过<code>usbmon</code>来实现</p>
<ul>
<li><p><a href="https://www.kernel.org/doc/html/latest/usb/usbmon.html">usbmon — The Linux Kernel documentation</a></p>
</li>
<li><p><a href="https://www.cnblogs.com/qiynet/p/17754131.html">Linux下USB抓包工具UsbMon的使用和包数据格式解析 - 瘋耔 - 博客园</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/267820933">https://zhuanlan.zhihu.com/p/267820933</a></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭SELinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment"># 可抓包接口list</span></span><br><span class="line">:/data/local/tmp <span class="comment"># ./tcpdump -D</span></span><br><span class="line">1.dummy0 [Up, Running]</span><br><span class="line">2.eth0 [Up, Running, Connected]</span><br><span class="line">3.eth1 [Up, Running, Connected]</span><br><span class="line">4.vlan3 [Up, Running, Connected]</span><br><span class="line">5.vlan5 [Up, Running, Connected]</span><br><span class="line">6.vlan7 [Up, Running, Connected]</span><br><span class="line">7.vlan8 [Up, Running, Connected]</span><br><span class="line">8.vlan9 [Up, Running, Connected]</span><br><span class="line">9.vlan67 [Up, Running, Connected]</span><br><span class="line">10.any (Pseudo-device that captures on all interfaces) [Up, Running]</span><br><span class="line">11.lo [Up, Running, Loopback]</span><br><span class="line">12.wlan0 [Up, Wireless]</span><br><span class="line">13.sit0 [none]</span><br><span class="line">14.p2p0 [Wireless]</span><br><span class="line">15.nflog (Linux netfilter <span class="built_in">log</span> (NFLOG) interface) [none]</span><br><span class="line">16.nfqueue (Linux netfilter queue (NFQUEUE) interface) [none]</span><br><span class="line">17.bond0 [none, Disconnected]</span><br><span class="line"><span class="comment"># 查看驱动安装情况</span></span><br><span class="line">:/data/local/tmp <span class="comment"># lsmod</span></span><br><span class="line">Module                  Size  Used by</span><br><span class="line">ptp_virtual            16384  0</span><br><span class="line">wlan                 6107136  0</span><br><span class="line">emac_dwc_eqos         200704  0</span><br><span class="line">v4l2loopback           40960  4</span><br><span class="line">machine_dlkm          208896  0</span><br><span class="line">stub_dlkm              16384  1</span><br><span class="line">native_dlkm           159744  0</span><br><span class="line">platform_dlkm        3186688  77 native_dlkm</span><br><span class="line">q6_dlkm              1282048  5 machine_dlkm,native_dlkm,platform_dlkm</span><br><span class="line">adsp_loader_dlkm       16384  0</span><br><span class="line">apr_dlkm              229376  4 machine_dlkm,platform_dlkm,q6_dlkm,adsp_loader_dlkm</span><br><span class="line">snd_event_dlkm         16384  3 machine_dlkm,q6_dlkm,apr_dlkm</span><br><span class="line">q6_notifier_dlkm       16384  1 apr_dlkm</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://www.secrss.com/articles/16837">针对USB接口的安全测试方法研究 - 安全内参 | 决策者的网络安全知识库</a></p>
</li>
<li><p>USB设备安全问题及防御方法综述</p>
</li>
<li><p><a href="https://www.usbzh.com/article/detail-607.html">USB规范分类大全和USB协议关系树 - USB中文网</a></p>
</li>
<li><p><a href="https://evilpan.com/2021/01/24/usb-fun/">USB 协议核心概念与实践 - evilpan</a></p>
</li>
<li><p><a href="https://www.usbzh.com/article/detail-110.html">USB 枚举&#x2F;断开过程 - USB中文网</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/USB%E5%A4%A7%E5%AE%B9%E9%87%8F%E5%AD%98%E5%82%A8%E8%AE%BE%E5%A4%87">USB大容量存储设备 - 维基百科，自由的百科全书</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/USB_On-The-Go">https://en.wikipedia.org/wiki/USB_On-The-Go</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>IoT</tag>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>void类型理解</title>
    <url>/2021/08/30/void%E7%B1%BB%E5%9E%8B%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="void-和-void-指针"><a href="#void-和-void-指针" class="headerlink" title="void 和 void 指针"></a><code>void</code> 和 <code>void</code> 指针</h3><ul>
<li><p><strong><code>void</code>：</strong> 代表”无类型”。<code>void*</code> 表示”无类型指针”，可以指向任何数据类型。</p>
</li>
<li><p><strong><code>void</code> 指针：</strong> 可以指向任意类型的数据，示例代码如下：</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *pint;</span><br><span class="line"><span class="type">void</span> *pvoid;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pvoid 可以指向任何类型</span></span><br><span class="line">pvoid = pint;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 `void` 类型转为其他类型需要强制类型转换</span></span><br><span class="line">pint = (<span class="type">int</span> *)pvoid;</span><br></pre></td></tr></table></figure>

<ul>
<li>在 ANSI C 标准中，不允许对 <code>void</code> 指针进行算术运算。但在 GNU C 中，<code>void*</code> 和 <code>char*</code> 视为相同，即 <code>sizeof(*pvoid) == sizeof(char)</code>。</li>
</ul>
<h3 id="void-关键字的作用"><a href="#void-关键字的作用" class="headerlink" title="void 关键字的作用"></a><code>void</code> 关键字的作用</h3><ul>
<li><p><strong>对函数返回值的限定：</strong> 如果函数不需要返回值，必须使用 <code>void</code> 限定，例如 <code>void func();</code>。</p>
</li>
<li><p><strong>对函数参数的限定：</strong> 如果函数不允许接收参数，必须使用 <code>void</code> 限定，例如 <code>int func(void);</code>。</p>
</li>
</ul>
<p><code>void</code> 指针可以指向任意类型的数据，因此可以在函数参数中使用 <code>void</code> 指针，使函数能够接受任意数据类型的指针作为参数，示例代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">memcpy</span><span class="params">(<span class="type">void</span> *dest, <span class="type">const</span> <span class="type">void</span> *src, <span class="type">size_t</span> len)</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">memset</span><span class="params">(<span class="type">void</span> *buffer, <span class="type">int</span> c, <span class="type">size_t</span> num)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="void-的真正作用"><a href="#void-的真正作用" class="headerlink" title="void 的真正作用"></a><code>void</code> 的真正作用</h3><p><code>void</code> 的作用在于：</p>
<ul>
<li>对函数返回值的限定。</li>
<li>对函数参数的限定。</li>
</ul>
<p>示例代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> *p1;</span><br><span class="line"><span class="type">int</span> *p2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">p1 = p2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">p1 = (<span class="type">float</span> *)p2;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *p1;</span><br><span class="line"><span class="type">int</span> *p2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line">p1 = p2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line">p2 = p1;</span><br></pre></td></tr></table></figure>

<h3 id="void-的使用规则"><a href="#void-的使用规则" class="headerlink" title="void 的使用规则"></a><code>void</code> 的使用规则</h3><ul>
<li>如果函数没有返回值，应该声明为 <code>void</code> 类型。</li>
</ul>
<p>在 C 语言中，未加返回类型限定的函数会被默认处理为返回整型值。例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">add(<span class="type">int</span> a, <span class="type">int</span> b);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2 + 3 = %d\n&quot;</span>, add(<span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果函数没有参数，应该声明参数为 <code>void</code>。</li>
</ul>
<p>在 C 语言中，可以向无参数的函数传递任何类型的参数，但在 C++ 中不行。</p>
<ul>
<li><p>对于 <code>void</code> 指针类型的使用：</p>
<ul>
<li><p>ANSI C 中不允许对 <code>void</code> 指针进行算术操作，因为 ANSI C 标准下，指针算术操作需要知道指向数据类型的大小，例如 <code>int *pint; pint++;</code> 会使 <code>pint</code> 增加 <code>sizeof(int)</code>。</p>
</li>
<li><p>GNU C（GNU’s Not Unix）认为 <code>void*</code> 类型与 <code>char*</code> 类型一致。</p>
</li>
</ul>
</li>
<li><p>如果函数的参数可以是任意指针，应该声明参数为 <code>void*</code>。注意，<code>void**</code> 不能代表一个真实的变量，<code>void</code> 体现了一种抽象。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>使用GDB对程序执行进行trace</title>
    <url>/2024/01/16/%E4%BD%BF%E7%94%A8GDB%E5%AF%B9%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%9B%E8%A1%8Ctrace/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>静态反汇编与动态反汇编存在一个精度与广度的区别。一般来说静态反汇编可以得到更多的覆盖率，而动态反汇编则可以得到更精确的执行路径。尝试以一个类<code>gdbinit</code>的GDB启动交互过程，对可执行程序进行trace，用于同<code>IDA Pro</code>等专业反编译&#x2F;反汇编工具进行比较，更好的对程序进行分析。</p>
<h2 id="Trace"><a href="#Trace" class="headerlink" title="Trace"></a>Trace</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">info files</span><br><span class="line"><span class="comment"># 断点在_start</span></span><br><span class="line">b _start</span><br><span class="line"><span class="built_in">set</span> pagination off</span><br><span class="line"><span class="built_in">set</span> disassembly-flavor intel</span><br><span class="line"><span class="comment"># 开启日志</span></span><br><span class="line"><span class="built_in">set</span> logging on</span><br><span class="line"><span class="built_in">set</span> logging redirect on</span><br><span class="line">r</span><br><span class="line"><span class="comment"># 每一条指令进行print</span></span><br><span class="line">display/i <span class="variable">$pc</span></span><br><span class="line"><span class="keyword">while</span> 1</span><br><span class="line">si</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>输出很多</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">wc</span> -l gdb.txt </span><br><span class="line">459667 gdb.txt</span><br></pre></td></tr></table></figure>

<p>过滤指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">egrep <span class="string">&#x27;^=&gt; 0x[0-9a-f]+:&#x27;</span> gdb.txt &gt; test.txt</span><br></pre></td></tr></table></figure>

<p>此时，就可以获取到程序实际执行的指令</p>
<p><img src="/2024/01/16/%E4%BD%BF%E7%94%A8GDB%E5%AF%B9%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E8%BF%9B%E8%A1%8Ctrace/2024-01-16-12-33-15-image.png"></p>
]]></content>
      <tags>
        <tag>Reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>灰袍推送Mark</title>
    <url>/2021/10/02/%E7%81%B0%E8%A2%8D%E6%8E%A8%E9%80%81Mark/</url>
    <content><![CDATA[<p>最近浏览了灰袍推送的tg频道，记录一些有意思的言论。灰袍推送中有些关于<strong>方法论</strong>、<strong>工程化</strong>、<strong>区块链</strong>的东西很有让人眼前一亮的感觉在此记录一下，方便以后查看。</p>
<span id="more"></span>

<h2 id="来自-灰袍推送"><a href="#来自-灰袍推送" class="headerlink" title="来自@灰袍推送"></a>来自@灰袍推送</h2><ol>
<li><p>论黑客工程化是我们的追求。黑客工程化是我们的追求。黑客工程化的意思是：我们的所有技能需要成体系活动，能交给机器的都交给机器，我们控制机器“木偶们”来加速我们的效率。为了最优这个工程化，我们很明白什么技能是必须精通的，什么技能是够用就好，什么技能是拿来主义。</p>
</li>
<li><p>那个“安全技能树”圈子，新人太多，我一旦分享点复杂的，似乎都安静了。对于陌生的知识怎么办？先 mark，以后有机会再消化，没机会也无所谓，至少知道有这个就好。对于不陌生的，赶紧跟上实践。实战派，不废话。指的就是这个。</p>
</li>
<li><p>灰帽 C#，这本书很不错，玩 Win 渗透的，建议这本书实操完。</p>
</li>
<li><p>什么黑客技术是好技术？黑产或 APT 组织已经在实战的技术 。</p>
</li>
<li><p>很多人不明白什么是职业什么是业余，什么是兴趣什么是工作。举个例子，黑客攻防，是我兴趣，也是工作，更成为了职业。而玩玩比特币、打打王者荣耀、吃吃小龙虾虽也是兴趣，但很业余，我不会通过这种方式去赚钱，能赚到也是投机罢了，如果能成大事，那也是投机，命运选中了我而已。再往细了说，黑客攻防分支领域几十条，也仅某些条会是我的职业，而有不少仅仅是业余，如打 CTF、玩黑手等。</p>
</li>
<li><p>通读两本行业一流的书籍是最稳的入门进阶方式。</p>
</li>
<li><p>设计一个商业模式的快感大于设计一个软件工程，不过都小于挖到一个大 0day，因为大 0day 自带牛逼的商业模式😄。</p>
</li>
<li><p>那些老协议，没认证与加密设计的，都会出大问题，多个 S 多关键。<a href="https://rtpbleed.com/">https://rtpbleed.com</a></p>
</li>
<li><p>天天喊发干货的人，我就问你 Kali 的每个工具你都了解过没，哪怕绝大多数点开看看都没吧？都懒成这样，是懒还是蠢？</p>
</li>
<li><p>干货拿走，消化一年再说：<a href="https://github.com/coreb1t/awesome-pentest-cheat-sheets">https://github.com/coreb1t/awesome-pentest-cheat-sheets</a></p>
</li>
<li><p>钓鱼攻击类型我总结几类：普通域名钓鱼、双因素钓鱼、XSS 高级钓鱼、CSRF 高级钓鱼、浏览器扩展钓鱼、系统木马钓鱼、MITM 钓鱼。这些细节在我的硬盘里。</p>
</li>
<li><p>建议大家开始关注“区块链”技术，在自己的技能树上多一个这个是好事，至少可以很好避免成为投机者中的韭菜。玩安全的，可以探索这个领域的安全问题。</p>
</li>
<li><p>不小心连续发的都是区块链相关的观点。做安全就是这样，需要跟上时代。区块链安全里，我们会把其分为两大类：区块链本身的安全，区块链之上各类业务的安全。对于我们来说，区块链本身的安全是我们的技能短板，里面大量的安全问题是需要算法、架构、工程的整体思考。如果不能深入到区块链创造细节里去，这类的安全从何研究？</p>
</li>
<li><p>未来的世界是去中心化与中心化的博弈平衡，绝对不会有完美的去中心化生态，原因请自行阅读《自私的基因》…</p>
</li>
<li><p>安全研究第一步：<strong>目标攻击面</strong>都有哪些？第二步：<strong>攻击路径如何描绘</strong>出来？这两大步骤是最考验安全人员经验及想象力的地方。</p>
</li>
<li><p>区块链世界最伟大的点在于：通过技术信仰吸引一批信徒且都利益绑定了。</p>
</li>
<li><p>比特币网络新增两个杀手锏，一个是闪电网络，一个是 RSK。</p>
</li>
<li><p>《麻省理工科技评论》2018 年“全球十大突破性技术” ：<a href="http://mp.weixin.qq.com/s/_kdbSRdIwr4bIXfNtut8Fw%EF%BC%8C%E5%8C%BF%E5%90%8D%E8%B4%A7%E5%B8%81Zcash%E5%9C%A8%E5%8D%81%E5%A4%A7%E4%B9%8B%E4%B8%80%E9%87%8C%E8%A2%AB%E6%8F%90%E5%8F%8A%E3%80%82">http://mp.weixin.qq.com/s/_kdbSRdIwr4bIXfNtut8Fw，匿名货币Zcash在十大之一里被提及。</a></p>
</li>
<li><p>看到 bettercap 从 Ruby 改为 Go，就等着 MSF 和 BeEF 了。黑客工程化的世界，要么 Python 要么 Go，其他都是小众，JavaScript 还差些火候。</p>
</li>
<li><p>Google 说了“您应始终使用 HTTPS 保护您的所有网站，即使这些网站并不处理敏感的通信。</p>
</li>
<li><p>你猜为什么？尤其是那些区块链世界的网站，即使上面没 Web 钱包，没交易所功能。</p>
</li>
<li><p>DNS Rebinding 技巧用于钱包节点 HTTP RPC 的攻击确实很猥琐，上古时代的技巧到现在还是这么的帅！</p>
</li>
<li><p>DNS这种设计一直是信息安全头顶的一朵乌云。</p>
</li>
</ol>
<p><img src="/2021/10/02/%E7%81%B0%E8%A2%8D%E6%8E%A8%E9%80%81Mark/dns.jpg" alt="文本, 电子邮件  描述已自动生成"></p>
<ol start="24">
<li><p>当年门罗币背后的那些人设计出这个币种时有没有预见过，这个举动无意间让网络世界和平了不少:-)</p>
</li>
<li><p>一次漂亮的分享最大的利己是：极其加深自己对所分享知识的印象。</p>
</li>
<li><p>一个好漏洞从发现到 PoC 到 Exploit 到 Attack 到 Defense 到披露，可以完美打通一次任督二脉。这样的机会不多，多珍惜。</p>
</li>
<li><p>过了遍比特币生态网络里的 RSK 生态解决方案及相关源码，他们对安全有不错的理解，尤其是他们应该早有意识到以太坊生态安全缺陷，这点很赞。</p>
</li>
<li><p>以太坊智能合约的出现让软件工程师真的可以对得起工程师称号，多好的事。</p>
</li>
<li><p>创业最爽的是还能亲自带队攻克两个核心能力：1. 0day；2. 黑客工程。</p>
</li>
<li><p>玩前端黑只需掌握 Chrome DevTools 就好:-)</p>
</li>
<li><p>区块链本质根本不是什么去中心，而是利益共识。明白这点就行了。而我是游走在两个极端之间的人，我只知道这里存在很多安全攻防博弈。乱，浮，和你我无关，我们改变不了。</p>
</li>
<li><p>最快的成长方式就是实战中成长，比如你拿到攻击者的样本，立马可以吸收其手法精髓，防御上就可以有的放矢。再比如为了突破，你死磕到底，一回头会发现：卧槽，掌握了各种技巧，而这许多是死磕前绝无法想象到的。</p>
</li>
<li><p>创造比纯粹的 Hacking 更重要，但 Hacking 才能促进更独特的创造。</p>
</li>
<li><p>探索本质这是黑客必须具备的基本素质。</p>
</li>
<li><p>DApp 游戏本质是一场“代码即法律”的黑客游戏。</p>
</li>
<li><p>黑客的初阶是逆向思维，进阶则是正向思维。</p>
</li>
<li><p>区块链领域的黑客几乎都不是曾经的黑客，他们几乎都是很懂区块链的技术人员，且带了点逆向思维。曾经的黑客几乎都过时了，绝大多数没机会在这个新领域开天辟地，只能费劲地跟着。</p>
</li>
<li><p>5G 与 IoT 时代的风险与机遇：<a href="https://threatpost.com/the-danger-and-opportunity-in-5g-connectivity-and-iot/138493/">https://threatpost.com/the-danger-and-opportunity-in-5g-connectivity-and-iot/138493/</a> 如果 IPv6 也大量启用，那对网络空间测绘来说，是个新挑战🤔。</p>
</li>
<li><p>我说我们在做区块链安全，其实我们在做都是公链生态的安全，慢雾的机会仅在这，如果这个生态没了，慢雾也会沉静甚至消失。是的，所谓的联盟链、私链不是我们的机会，我们的机会在自由的网络空间里:-)</p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/s-gxfYsGUeosiRwpXoWN6w">https://mp.weixin.qq.com/s/s-gxfYsGUeosiRwpXoWN6w</a></p>
</li>
<li><p>维基解密新年推文里问：2019，你认为哪些被泄露的档案最能改变我们对人类文明的理解？… 要搞大事？</p>
</li>
</ol>
<h2 id="来自-Ton-OKEx中文频道"><a href="#来自-Ton-OKEx中文频道" class="headerlink" title="来自@Ton&amp;OKEx中文频道"></a>来自@<strong>Ton&amp;OKEx中文频道</strong></h2><ol>
<li>Ton区块链继承自Telegram，旨在为数十亿用户提供服务。它拥有超快的交易速度、低廉的费用和易于使用的原生应用程序，其中一些应用程序可以直接在Telegram中使用，如 @wallet 或 @cryptobot 。</li>
</ol>
]]></content>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>提问的智慧</title>
    <url>/2021/07/17/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/</url>
    <content><![CDATA[<blockquote>
<p>说明：文章来自转载</p>
</blockquote>
<p><a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/pulls"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome"></a></p>
<p><strong>How To Ask Questions The Smart Way</strong></p>
<p>Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen</p>
<p>本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。</p>
<p>原文网址：<a href="http://www.catb.org/~esr/faqs/smart-questions.html">http://www.catb.org/~esr&#x2F;faqs&#x2F;smart-questions.html</a></p>
<p>Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux), 2010 by Gasolin, 2015 by Ryan Wu</p>
<p>本中文指南是基于原文 3.10 版以及 2010 年由 <a href="https://github.com/gasolin">Gasolin</a> 所翻译版本的最新翻译；</p>
<p>协助指出翻译问题，<strong>请<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/issues/new">发 Issue</a>，或直接<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/compare">发 Pull Request</a> 给我。</strong></p>
<p>本文另有<a href="README.md">繁體中文版</a>。</p>
<h2 id="原文版本历史"><a href="#原文版本历史" class="headerlink" title="原文版本历史"></a><a href="history.md">原文版本历史</a></h2><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>许多项目在他们的使用协助&#x2F;说明网页中链接了本指南，这么做很好，我们也鼓励大家都这么做。但如果你是负责管理这个项目网页的人，请在超链接附近的显著位置上注明：</p>
<p><strong>本指南不提供此项目的实际支持服务！</strong></p>
<p>我们已经深刻领教到少了上述声明所带来的痛苦。因为少了这点声明，我们不停地被一些白痴纠缠。这些白痴认为既然我们发布了这本指南，那么我们就有责任解决世上所有的技术问题。</p>
<p>如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些白痴之一。别问我们问题，我们只会忽略你。我们在这本指南中是教你如何从那些真正懂得你所遇到软件或硬件问题的人取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p>
<p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p>
<p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，”好问题！”是诚挚的大力称赞。</p>
<p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p>
<p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p>
<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p>
<p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p>
<p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p>
<p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p>
<p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p>
<p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p>
<h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p>
<ol>
<li>尝试在你准备提问的论坛的旧文章中搜索答案。</li>
<li>尝试上网搜索以找到答案。</li>
<li>尝试阅读手册以找到答案。</li>
<li>尝试阅读常见问题文件（FAQ）以找到答案。</li>
<li>尝试自己检查或试验以找到答案。</li>
<li>向你身边的强者朋友打听以找到答案。</li>
<li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li>
</ol>
<p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p>
<p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="http://groups.google.com/">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p>
<p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p>
<p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p>
<p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p>
<p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p>
<p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p>
<h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p>
<ul>
<li>在与主题不合的论坛上贴出你的问题。</li>
<li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li>
<li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li>
<li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li>
</ul>
<p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p>
<p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p>
<p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。</p>
<p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p>
<p>别像机关枪似的一次”扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p>
<p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p>
<p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p>
<p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p>
<h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p>
<p>近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p>
<p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p>
<p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites">超过一百个网站</a>，以下是最常用的几个站：</p>
<ul>
<li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li>
<li>Stack Overflow 是问写程序有关的问题。</li>
<li>Server Fault 是问服务器和网管相关的问题。</li>
</ul>
<h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p>
<p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 “用<strong>我们的</strong>版本”。</p>
<p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p>
<p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p>
<p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p>
<h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p>
<ul>
<li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li>
<li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li>
<li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li>
<li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li>
</ul>
<p>如果一个项目既有”使用者” 也有”开发者”（或”黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向”使用者”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p>
<p>然而，如果你<strong>确信</strong>你的问题很特别，而且在”使用者” 列表或论坛中几天都没有回复，可以试试前往”开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p>
<p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p>
<h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p>
<p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p>
<blockquote>
<p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p>
</blockquote>
<blockquote>
<p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p>
</blockquote>
<blockquote>
<p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p>
</blockquote>
<p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p>
<p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p>
<p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p>
<p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p>
<p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p>
<p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p>
<h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p>
<p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p>
<h3 id="用清晰、正确、精准且语法正确的语句"><a href="#用清晰、正确、精准且语法正确的语句" class="headerlink" title="用清晰、正确、精准且语法正确的语句"></a>用清晰、正确、精准且语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p>
<p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p>
<p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it&#39;s</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox">Alan Cox</a> 也许可以这样做，但你不行）。</p>
<p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/%E7%81%AB%E6%98%9F%E6%96%87">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>
<p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p>
<p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：<br>[译注：以下附上原文以供使用]</p>
<blockquote>
<p>English is not my native language; please excuse typing errors.</p>
</blockquote>
<ul>
<li>英文不是我的母语，请原谅我的错字或语法。</li>
</ul>
<blockquote>
<p>If you speak $LANGUAGE, please email&#x2F;PM me;<br>I may need assistance translating my question.</p>
</blockquote>
<ul>
<li>如果你说<strong>某语言</strong>，请寄信&#x2F;私讯给我；我需要有人协助我翻译我的问题。</li>
</ul>
<blockquote>
<p>I am familiar with the technical terms,<br>but some slang expressions and idioms are difficult for me.</p>
</blockquote>
<ul>
<li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li>
</ul>
<blockquote>
<p>I’ve posted my question in $LANGUAGE and English.<br>I’ll be glad to translate responses, if you only use one or the other.</p>
</blockquote>
<ul>
<li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li>
</ul>
<h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p>
<ul>
<li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html">关闭 HTML</a> 并不难）。</li>
<li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li>
<li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li>
<li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li>
<li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li>
<li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li>
<li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li>
<li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li>
</ul>
<p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p>
<h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul>
<li>仔细、清楚地描述你的问题或 Bug 的症状。</li>
<li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li>
<li>描述在提问前你是怎样去研究和理解这个问题的。</li>
<li>描述在提问前为确定问题而采取的诊断步骤。</li>
<li>描述最近做过什么可能相关的硬件或软件变更。</li>
<li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>
</ul>
<p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p>
<p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p>
<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p>
<h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>
<p>这样做的用处至少有三点。<br>第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；<br>第二，简化问题使你更有可能得到<strong>有用</strong>的答案；<br>第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>
<h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p>
<p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p>
<p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p>
<p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p>
<h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p>
<p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p>
<p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p>
<h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我在编译内核时接连遇到 SIG11 错误，<br>我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6&#x2F;233 CPU（威盛 Apollo VP2 芯片组），<br>256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，<br>但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。<br>所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p>
</blockquote>
<p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p>
<h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p>
<p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p>
<p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p>
<h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p>
<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），<br>但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p>
</blockquote>
<p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p>
<h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p>
<p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p>
<p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p>
<h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p>
<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p>
<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>
<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p>
<h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p>
<p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译&#x2F;直译&#x2F;被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p>
<p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p>
<p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>
<h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>
<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p>
<h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p>
<p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p>
<p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p>
<p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html">是或否类型的回答</a>。</p>
<h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p>
<p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p>
<p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p>
<p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p>
<h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p>
<p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p>
<p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p>
<p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p>
<h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>
<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p>
<p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>
<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>
<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表&#x2F;新闻群组&#x2F;论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>
<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>
<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>
<h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="RTFM"></a></p>
<h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p>
<p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 **<a href="http://lmgtfy.com/">Google 是你的朋友</a>**！）</p>
<p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p>
<p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p>
<ul>
<li><strong>你需要的信息非常容易获得</strong>；</li>
<li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li>
</ul>
<p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p>
<h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p>
<p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p>
<h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p>
<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>
<p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p>
<p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p>
<p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html">tact filters</a></strong>)。</p>
<p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p>
<h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p>
<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p>
<p>熬过去，这很正常。事实上，它是有益健康且合理的。</p>
<p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p>
<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p>
<p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p>
<p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p>
<p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p>
<p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p>
<p>也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p>
<h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p>
<p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p>
<p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p>
<p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p>
<p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p>
<p>问题：<a href="#q5">我的程序&#x2F;设定&#x2F;SQL 语句没有用</a></p>
<p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p>
<p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q9">我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</a></p>
<hr>
<p><a id="q1"></a></p>
<blockquote>
<p>问题：我能在哪找到 X 程序或 X 资源？</p>
</blockquote>
<p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com/">Google</a> 吗？</p>
<p><a id="q2"></a></p>
<blockquote>
<p>问题：我怎样用 X 做 Y？</p>
</blockquote>
<p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p>
<p><a id="q3"></a></p>
<blockquote>
<p>问题：如何设定我的 shell 提示？？</p>
</blockquote>
<p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p>
<p><a id="q4"></a></p>
<blockquote>
<p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p>
</blockquote>
<p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p>
<p><a id="q5"></a></p>
<blockquote>
<p>问题：我的{程序&#x2F;设定&#x2F;SQL 语句}不工作</p>
</blockquote>
<p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p>
<ul>
<li>你还有什么要补充的吗？</li>
<li>真糟糕，希望你能搞定。</li>
<li>这关我屁事？</li>
</ul>
<p><a id="q6"></a></p>
<blockquote>
<p>问题：我的 Windows 电脑有问题，你能帮我吗？</p>
</blockquote>
<p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p>
<p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p>
<p><a id="q7"></a></p>
<blockquote>
<p>问题：我的程序不会动了，我认为系统工具 X 有问题</p>
</blockquote>
<p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p>
<p><a id="q8"></a></p>
<blockquote>
<p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p>
</blockquote>
<p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html">这儿</a>找到使用者群组的清单）。</p>
<p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p>
<p><a id="q9"></a></p>
<blockquote>
<p>问题：我怎么才能破解 root 帐号&#x2F;窃取 OP 特权&#x2F;读别人的邮件呢？</p>
</blockquote>
<p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p>
<h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p>
</blockquote>
<p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p>
</blockquote>
<p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p>
</blockquote>
<p>他觉得都是别人的错，这个傲慢自大的提问者。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p>
</blockquote>
<p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我的主机板有问题了，谁来帮我？</p>
</blockquote>
<p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p>
</blockquote>
<p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p>
<p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p>
<p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p>
<p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p>
<p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p>
<p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p>
<h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p>
<p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>
<p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p>
<p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p>
<p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p>
<p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p>
<h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>
<p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p>
<p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>
<p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p>
<p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p>
<p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p>
<p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。</p>
<p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p>
<p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p>
<p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p>
<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/">Unix 系统和网络基本原理</a>。</p>
<p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html">软件发布实践</a>操作。</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写<code>如何更好地回答问题</code>这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。</p>
]]></content>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
</search>
